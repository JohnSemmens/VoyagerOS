<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_spark_fun___i2_c___g_p_s___arduino___library_8cpp" kind="file">
    <compoundname>SparkFun_I2C_GPS_Arduino_Library.cpp</compoundname>
    <includes refid="_spark_fun___i2_c___g_p_s___arduino___library_8h" local="yes">SparkFun_I2C_GPS_Arduino_Library.h</includes>
    <incdepgraph>
      <node id="768">
        <label>SparkFun_I2C_GPS_Arduino_Library.h</label>
        <link refid="_spark_fun___i2_c___g_p_s___arduino___library_8h"/>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>Wire.h</label>
      </node>
      <node id="769">
        <label>Arduino.h</label>
      </node>
      <node id="767">
        <label>D:/Cloud/OneDrive/Voyager/VoyagerOS/SparkFun_I2C_GPS_Arduino_Library.cpp</label>
        <link refid="SparkFun_I2C_GPS_Arduino_Library.cpp"/>
        <childnode refid="768" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>a<sp/>library<sp/>written<sp/>for<sp/>the<sp/>MediaTek<sp/>MT3333<sp/>based<sp/>GPS<sp/>module<sp/>with<sp/>I2C<sp/>firmware</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>specially<sp/>loaded.<sp/>SparkFun<sp/>sells<sp/>these<sp/>at<sp/>its<sp/>website:<sp/>www.sparkfun.com</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Written<sp/>by<sp/>Nathan<sp/>Seidle<sp/>@<sp/>SparkFun<sp/>Electronics,<sp/>April<sp/>25th,<sp/>2017</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>This<sp/>GPS<sp/>module<sp/>is<sp/>special<sp/>because<sp/>it<sp/>can<sp/>use<sp/>an<sp/>I2C<sp/>interface<sp/>to<sp/>communicate.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>handles<sp/>the<sp/>pulling<sp/>in<sp/>of<sp/>data<sp/>over<sp/>I2C.<sp/>We<sp/>recommend<sp/>a<sp/>parsing<sp/>engine</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>such<sp/>as<sp/>TinyGPS.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>https://github.com/sparkfun/SparkFun_I2C_GPS_Arduino_Library</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>Do<sp/>you<sp/>like<sp/>this<sp/>library?<sp/>Help<sp/>support<sp/>SparkFun.<sp/>Buy<sp/>a<sp/>board!</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>Development<sp/>environment<sp/>specifics:</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>Arduino<sp/>IDE<sp/>1.8.1</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h" kindref="compound">SparkFun_I2C_GPS_Arduino_Library.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//Sets<sp/>up<sp/>the<sp/>sensor<sp/>for<sp/>constant<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>false<sp/>if<sp/>sensor<sp/>does<sp/>not<sp/>respond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_i2_c_g_p_s_1a31cb1f44518ba8b92a7419a3425e1b8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="class_i2_c_g_p_s_1a31cb1f44518ba8b92a7419a3425e1b8a" kindref="member">I2CGPS::begin</ref>(TwoWire<sp/>&amp;wirePort,<sp/>uint32_t<sp/>i2cSpeed)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Bring<sp/>in<sp/>the<sp/>user&apos;s<sp/>choices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref><sp/>=<sp/>&amp;wirePort;<sp/></highlight><highlight class="comment">//Grab<sp/>which<sp/>port<sp/>the<sp/>user<sp/>wants<sp/>us<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;begin();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;setClock(i2cSpeed);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Reset<sp/>the<sp/>location<sp/>holder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Ping<sp/>the<sp/>module<sp/>to<sp/>see<sp/>if<sp/>it<sp/>responds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;beginTransmission(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;write(0);<sp/></highlight><highlight class="comment">//Write<sp/>dummy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;endTransmission();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;requestFrom(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>,<sp/>1))</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//Success!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//Module<sp/>failed<sp/>to<sp/>respond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//Polls<sp/>the<sp/>GPS<sp/>module<sp/>to<sp/>see<sp/>if<sp/>new<sp/>data<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//Reads<sp/>a<sp/>255<sp/>byte<sp/>packet<sp/>from<sp/>GPS<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>new<sp/>data<sp/>is<sp/>there,<sp/>appends<sp/>it<sp/>to<sp/>the<sp/>gpsData<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//Requires<sp/>25.5ms<sp/>@<sp/>100kHz<sp/>I2C,<sp/>6.375ms<sp/>@<sp/>400kHz<sp/>I2C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//So<sp/>call<sp/>sparingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_i2_c_g_p_s_1a5b025b8d6a38f965674c3abdb752a483" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i2_c_g_p_s_1a5b025b8d6a38f965674c3abdb752a483" kindref="member">I2CGPS::check</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Re-write<sp/>this<sp/>function<sp/>to<sp/>be<sp/>less<sp/>tied<sp/>to<sp/>Arduino&apos;s<sp/>32<sp/>byte<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Maybe<sp/>pass<sp/>a<sp/>maxRead<sp/>during<sp/>.begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>uint8_t<sp/>packetData[<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a879456c3b8e2853f7044d764e9c180d4" kindref="member">MAX_PACKET_SIZE</ref>];<sp/></highlight><highlight class="comment">//Store<sp/>all<sp/>incoming<sp/>I2C<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/><ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a879456c3b8e2853f7044d764e9c180d4" kindref="member">MAX_PACKET_SIZE</ref><sp/>;<sp/>x++)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>packetData[x]<sp/>=<sp/>0x0A;<sp/></highlight><highlight class="comment">//Fill<sp/>with<sp/>garbage<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Arduino<sp/>can<sp/>only<sp/>Wire.read()<sp/>in<sp/>32<sp/>byte<sp/>chunks.<sp/>Yay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>chunk<sp/>=<sp/>0<sp/>;<sp/>chunk<sp/>&lt;<sp/>7<sp/>;<sp/>chunk++)<sp/></highlight><highlight class="comment">//8<sp/>chunks<sp/>*<sp/>32<sp/>=<sp/>256<sp/>bytes<sp/>total<sp/>so<sp/>we<sp/>need<sp/>to<sp/>shave<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;requestFrom(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>,<sp/>32))</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/>32<sp/>;<sp/>x++)<sp/></highlight><highlight class="comment">//Read<sp/>32<sp/>bytes<sp/>into<sp/>the<sp/>255<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packetData[(chunk<sp/>*<sp/>32)<sp/>+<sp/>x]<sp/>=<sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;read();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read<sp/>final<sp/>31<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;requestFrom(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>,<sp/>31))</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/>31<sp/>;<sp/>x++)<sp/></highlight><highlight class="comment">//Read<sp/>31<sp/>bytes<sp/>into<sp/>the<sp/>255<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packetData[(7<sp/>*<sp/>32)<sp/>+<sp/>x]<sp/>=<sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;read();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Move<sp/>any<sp/>valid<sp/>bytes<sp/>from<sp/>packetData<sp/>to<sp/>gpsData<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/><ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a879456c3b8e2853f7044d764e9c180d4" kindref="member">MAX_PACKET_SIZE</ref><sp/>;<sp/>x++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packetData[x]<sp/>!=<sp/>0x0A)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a92fc4cd53baf1d26a0e881c5776ea388" kindref="member">gpsData</ref>[<ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref>++]<sp/>=<sp/>packetData[x];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>==<sp/>MAX_PACKET_SIZE)<sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Wrap<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1ad07ce50d10625ba44f0be32618cfc7a5" kindref="member">_printDebug</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>==<sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a0760ac6cb16aef6220f4122ec44ff95f" kindref="member">_debugSerial</ref>-&gt;println(F(</highlight><highlight class="stringliteral">&quot;Buffer<sp/>overrun&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Print<sp/>raw<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(packetData[x]<sp/>==<sp/>&apos;$&apos;)<sp/>_debugSerial-&gt;println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_debugSerial-&gt;write(packetData[x]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>#<sp/>of<sp/>available<sp/>bytes<sp/>that<sp/>can<sp/>be<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="class_i2_c_g_p_s_1a93bc3fed62a4ef85d4e93870ca8c16dd" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="class_i2_c_g_p_s_1a93bc3fed62a4ef85d4e93870ca8c16dd" kindref="member">I2CGPS::available</ref>()</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>tail=head<sp/>then<sp/>no<sp/>new<sp/>data<sp/>is<sp/>available<sp/>in<sp/>the<sp/>local<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//So<sp/>now<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>module<sp/>has<sp/>anything<sp/>new<sp/>in<sp/>its<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>==<sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a5b025b8d6a38f965674c3abdb752a483" kindref="member">check</ref>();<sp/></highlight><highlight class="comment">//Check<sp/>to<sp/>module<sp/>to<sp/>see<sp/>if<sp/>new<sp/>I2C<sp/>bytes<sp/>are<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Return<sp/>new<sp/>data<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>&gt;<sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref><sp/>-<sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>&gt;<sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a879456c3b8e2853f7044d764e9c180d4" kindref="member">MAX_PACKET_SIZE</ref><sp/>-<sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>+<sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);<sp/></highlight><highlight class="comment">//No<sp/>data<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>the<sp/>next<sp/>available<sp/>byte<sp/>from<sp/>the<sp/>gpsData<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>0<sp/>if<sp/>no<sp/>byte<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="class_i2_c_g_p_s_1af46f5ff30ef0d84ecdeeb5ea75d210e3" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="class_i2_c_g_p_s_1af46f5ff30ef0d84ecdeeb5ea75d210e3" kindref="member">I2CGPS::read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>!=<sp/><ref refid="class_i2_c_g_p_s_1a3ac1cde1a568976c925bc5d1e22c40ac" kindref="member">_head</ref>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>datum<sp/>=<sp/><ref refid="class_i2_c_g_p_s_1a92fc4cd53baf1d26a0e881c5776ea388" kindref="member">gpsData</ref>[<ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref>++];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>==<sp/><ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a879456c3b8e2853f7044d764e9c180d4" kindref="member">MAX_PACKET_SIZE</ref>)<sp/><ref refid="class_i2_c_g_p_s_1a393026167c1ca3758ab10335ebe05473" kindref="member">_tail</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Wrap<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(datum);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);<sp/></highlight><highlight class="comment">//No<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//Enables<sp/>serial<sp/>printing<sp/>of<sp/>local<sp/>error<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="class_i2_c_g_p_s_1a0b1ca0aa65decd6f10169871d64660d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i2_c_g_p_s_1a0b1ca0aa65decd6f10169871d64660d9" kindref="member">I2CGPS::enableDebugging</ref>(Stream<sp/>&amp;debugPort<sp/></highlight><highlight class="comment">/*=<sp/>Serial*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1a0760ac6cb16aef6220f4122ec44ff95f" kindref="member">_debugSerial</ref><sp/>=<sp/>&amp;debugPort;<sp/></highlight><highlight class="comment">//Grab<sp/>which<sp/>port<sp/>the<sp/>user<sp/>wants<sp/>us<sp/>to<sp/>use<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1ad07ce50d10625ba44f0be32618cfc7a5" kindref="member">_printDebug</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Should<sp/>we<sp/>print<sp/>the<sp/>commands<sp/>we<sp/>send?<sp/>Good<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//Turn<sp/>off<sp/>printing<sp/>of<sp/>GPS<sp/>character<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_i2_c_g_p_s_1aa618d037f01abb99282b14db89c19c3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i2_c_g_p_s_1aa618d037f01abb99282b14db89c19c3c" kindref="member">I2CGPS::disableDebugging</ref>()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="class_i2_c_g_p_s_1ad07ce50d10625ba44f0be32618cfc7a5" kindref="member">_printDebug</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Turn<sp/>off<sp/>extra<sp/>print<sp/>statements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//Functions<sp/>for<sp/>sending<sp/>commands<sp/>to<sp/>the<sp/>GPS<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//Send<sp/>a<sp/>given<sp/>command<sp/>or<sp/>configuration<sp/>string<sp/>to<sp/>the<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>input<sp/>buffer<sp/>on<sp/>the<sp/>MTK<sp/>is<sp/>255<sp/>bytes.<sp/>Caller<sp/>must<sp/>keep<sp/>strings<sp/>shorter<sp/>than<sp/>255<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//Any<sp/>time<sp/>you<sp/>end<sp/>transmission<sp/>you<sp/>must<sp/>give<sp/>the<sp/>module<sp/>10ms<sp/>to<sp/>process<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="class_i2_c_g_p_s_1a66c67976e692beab03206c531f8707ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="class_i2_c_g_p_s_1a66c67976e692beab03206c531f8707ee" kindref="member">I2CGPS::sendMTKpacket</ref>(String<sp/>command)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command.length()<sp/>&gt;<sp/>255)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_i2_c_g_p_s_1ad07ce50d10625ba44f0be32618cfc7a5" kindref="member">_printDebug</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a0760ac6cb16aef6220f4122ec44ff95f" kindref="member">_debugSerial</ref>-&gt;println(F(</highlight><highlight class="stringliteral">&quot;Command<sp/>message<sp/>too<sp/>long!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Arduino<sp/>can<sp/>only<sp/>Wire.write()<sp/>in<sp/>32<sp/>byte<sp/>chunks.<sp/>Yay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>chunk<sp/>=<sp/>0<sp/>;<sp/>chunk<sp/>&lt;<sp/>7<sp/>;<sp/>chunk++)<sp/></highlight><highlight class="comment">//8<sp/>chunks<sp/>*<sp/>32<sp/>=<sp/>256<sp/>bytes<sp/>total<sp/>so<sp/>we<sp/>need<sp/>to<sp/>shave<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;beginTransmission(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/>32<sp/>;<sp/>x++)<sp/></highlight><highlight class="comment">//Send<sp/>out<sp/>32<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(chunk<sp/>*<sp/>32<sp/>+<sp/>x)<sp/>==<sp/>command.length())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//We&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;write(command[(chunk<sp/>*<sp/>32)<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;endTransmission();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);<sp/></highlight><highlight class="comment">//Slave<sp/>requires<sp/>10<sp/>ms<sp/>to<sp/>process<sp/>incoming<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Send<sp/>final<sp/>31<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command.length()<sp/>&gt;<sp/>(7<sp/>*<sp/>32))<sp/></highlight><highlight class="comment">//Do<sp/>we<sp/>have<sp/>more<sp/>than<sp/>224<sp/>bytes?<sp/>Then<sp/>send<sp/>last<sp/>31</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;beginTransmission(<ref refid="_spark_fun___i2_c___g_p_s___arduino___library_8h_1a07a910d0d82e96a2ca1c57baa45c507a" kindref="member">MT333x_ADDR</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/>31<sp/>;<sp/>x++)<sp/></highlight><highlight class="comment">//Write<sp/>any<sp/>remaining<sp/>bytes<sp/>up<sp/>to<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(7<sp/>*<sp/>32<sp/>+<sp/>x)<sp/>==<sp/>command.length())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//We&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;write(command[(7<sp/>*<sp/>32)<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i2_c_g_p_s_1a6bf4ae0f13b15ff1c94e22bb07f70352" kindref="member">_i2cPort</ref>-&gt;endTransmission();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//Given<sp/>a<sp/>packetType<sp/>and<sp/>any<sp/>settings,<sp/>return<sp/>string<sp/>that<sp/>is<sp/>a<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//config<sp/>sentence<sp/>complete<sp/>with<sp/>CRC<sp/>and<sp/>\r<sp/>\n<sp/>ending<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//PMTK<sp/>uses<sp/>a<sp/>different<sp/>packet<sp/>numbers<sp/>to<sp/>do<sp/>configure<sp/>the<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//These<sp/>vary<sp/>from<sp/>0<sp/>to<sp/>999.<sp/>See<sp/>&apos;MTK<sp/>NMEA<sp/>Packet&apos;<sp/>datasheet<sp/>for<sp/>more<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="class_i2_c_g_p_s_1a3873e3afbecaf4f4aac5d1f9b17d3729" refkind="member"><highlight class="normal">String<sp/><ref refid="class_i2_c_g_p_s_1a3873e3afbecaf4f4aac5d1f9b17d3729" kindref="member">I2CGPS::createMTKpacket</ref>(uint16_t<sp/>packetType,<sp/>String<sp/>dataField)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Build<sp/>config<sp/>sentence<sp/>using<sp/>packetType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>String<sp/>configSentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;$PMTK&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Default<sp/>header<sp/>for<sp/>all<sp/>GPS<sp/>config<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Attach<sp/>the<sp/>packetType<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Append<sp/>any<sp/>leading<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packetType<sp/>&lt;<sp/>100)<sp/>configSentence<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packetType<sp/>&lt;<sp/>10)<sp/>configSentence<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/>packetType;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Attach<sp/>any<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataField.length()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>configSentence<sp/>+=<sp/>dataField;<sp/></highlight><highlight class="comment">//Attach<sp/>the<sp/>string<sp/>of<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Attach<sp/>end<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/><ref refid="class_i2_c_g_p_s_1a6998b74a2b5afef87d218472d285d7bd" kindref="member">calcCRCforMTK</ref>(configSentence);<sp/></highlight><highlight class="comment">//Attach<sp/>CRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Attach<sp/>ending<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Carriage<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>configSentence<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Line<sp/>feed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(configSentence);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//Calculate<sp/>CRC<sp/>for<sp/>MTK<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//Given<sp/>a<sp/>string<sp/>of<sp/>characters,<sp/>XOR<sp/>them<sp/>all<sp/>together<sp/>and<sp/>return<sp/>CRC<sp/>in<sp/>string<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="class_i2_c_g_p_s_1a6998b74a2b5afef87d218472d285d7bd" refkind="member"><highlight class="normal">String<sp/><ref refid="class_i2_c_g_p_s_1a6998b74a2b5afef87d218472d285d7bd" kindref="member">I2CGPS::calcCRCforMTK</ref>(String<sp/>sentence)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>uint8_t<sp/>crc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//We<sp/>need<sp/>to<sp/>ignore<sp/>the<sp/>first<sp/>character<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//And<sp/>the<sp/>last<sp/>character<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>x<sp/>=<sp/>1<sp/>;<sp/>x<sp/>&lt;<sp/>sentence.length()<sp/>-<sp/>1<sp/>;<sp/>x++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>^=<sp/>sentence[x];<sp/></highlight><highlight class="comment">//XOR<sp/>this<sp/>byte<sp/>with<sp/>all<sp/>the<sp/>others</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>String<sp/>output<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crc<sp/>&lt;<sp/>10)<sp/>output<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Append<sp/>leading<sp/>zero<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>output<sp/>+=<sp/>String(crc,<sp/>HEX);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/SparkFun_I2C_GPS_Arduino_Library.cpp"/>
  </compounddef>
</doxygen>
