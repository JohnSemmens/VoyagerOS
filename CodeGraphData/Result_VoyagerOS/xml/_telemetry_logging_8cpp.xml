<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_telemetry_logging_8cpp" kind="file">
    <compoundname>TelemetryLogging.cpp</compoundname>
    <includes refid="_telemetry_logging_8h" local="yes">TelemetryLogging.h</includes>
    <includes refid="_waypoints_8h" local="yes">Waypoints.h</includes>
    <includes refid="_mission_8h" local="yes">Mission.h</includes>
    <includes refid="_g_p_s_8h" local="yes">GPS.h</includes>
    <includes refid="_navigation_8h" local="yes">Navigation.h</includes>
    <includes refid="_u_s_f_s___i_m_u_8h" local="yes">USFS_IMU.h</includes>
    <includes refid="_command_state___processor_8h" local="yes">CommandState_Processor.h</includes>
    <includes refid="_wear_tracking_8h" local="yes">WearTracking.h</includes>
    <incdepgraph>
      <node id="809">
        <label>Waypoints.h</label>
        <link refid="_waypoints_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
      </node>
      <node id="813">
        <label>USFS_IMU.h</label>
        <link refid="_u_s_f_s___i_m_u_8h"/>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="816">
        <label>EM7180.h</label>
        <link refid="_e_m7180_8h"/>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
      </node>
      <node id="810">
        <label>Navigation.h</label>
        <link refid="_navigation_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
      </node>
      <node id="819">
        <label>WearTracking.h</label>
        <link refid="_wear_tracking_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
      </node>
      <node id="811">
        <label>Mission.h</label>
        <link refid="_mission_8h"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
      </node>
      <node id="812">
        <label>GPS.h</label>
        <link refid="_g_p_s_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
      </node>
      <node id="818">
        <label>Wire.h</label>
      </node>
      <node id="815">
        <label>USFS_config.h</label>
        <link refid="_u_s_f_s__config_8h"/>
      </node>
      <node id="805">
        <label>D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp</label>
        <link refid="TelemetryLogging.cpp"/>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
      </node>
      <node id="817">
        <label>I2Cdev.h</label>
        <link refid="_i2_cdev_8h"/>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
      </node>
      <node id="814">
        <label>USFS_def.h</label>
        <link refid="_u_s_f_s__def_8h"/>
        <childnode refid="815" relation="include">
        </childnode>
      </node>
      <node id="807">
        <label>arduino.h</label>
      </node>
      <node id="808">
        <label>CommandState_Processor.h</label>
        <link refid="_command_state___processor_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
      </node>
      <node id="820">
        <label>Filters.h</label>
        <link refid="_filters_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
      </node>
      <node id="806">
        <label>TelemetryLogging.h</label>
        <link refid="_telemetry_logging_8h"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a6e6c124a8544f54a81bb39badabb0342" prot="public" static="no" mutable="no">
        <type><ref refid="struct_navigation_data_type" kindref="compound">NavigationDataType</ref></type>
        <definition>NavigationDataType NavData</definition>
        <argsstring></argsstring>
        <name>NavData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a84903d3dde78582cbc92053c3c18d444" prot="public" static="no" mutable="no">
        <type><ref refid="struct_state_values_struct" kindref="compound">StateValuesStruct</ref></type>
        <definition>StateValuesStruct StateValues</definition>
        <argsstring></argsstring>
        <name>StateValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a6924c9cecb78ca1a791d8c5b2389a20e" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long loop_period_us</definition>
        <argsstring></argsstring>
        <name>loop_period_us</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="24" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1ab2750358545c3531197e99469fa8d2f4" prot="public" static="no" mutable="no">
        <type><ref refid="struct_i_m_u_struct" kindref="compound">IMUStruct</ref></type>
        <definition>IMUStruct myIMU</definition>
        <argsstring></argsstring>
        <name>myIMU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1abfd08ed7f06fc22e2d32bd2a1e94fa3a" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long GPS_Last_Loc</definition>
        <argsstring></argsstring>
        <name>GPS_Last_Loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="27" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/GPS.cpp" bodystart="22" bodyend="-1"/>
        <referencedby refid="_g_p_s_8h_1aad9fb3151b07a5325e45216fdc81d8f8" compoundref="_g_p_s_8cpp" startline="204" endline="222">GPS_LocationIs_Valid</referencedby>
        <referencedby refid="_g_p_s_8h_1a05ea9a63a110055be8b5e154609d668c" compoundref="_g_p_s_8cpp" startline="54" endline="98">GPS_Read</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a1063514a8da815eb7c6ce64b11f55500" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long GPS_Last_Message</definition>
        <argsstring></argsstring>
        <name>GPS_Last_Message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="28" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/GPS.cpp" bodystart="23" bodyend="-1"/>
        <referencedby refid="_g_p_s_8h_1a05ea9a63a110055be8b5e154609d668c" compoundref="_g_p_s_8cpp" startline="54" endline="98">GPS_Read</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a546169abc0a62fd2c162220444214ace" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool UseSimulatedGPS</definition>
        <argsstring></argsstring>
        <name>UseSimulatedGPS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="29" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a723236e33d541fe926aafbf860757e71" prot="public" static="no" mutable="no">
        <type><ref refid="struct_time" kindref="compound">Time</ref></type>
        <definition>Time CurrentLocalTime</definition>
        <argsstring></argsstring>
        <name>CurrentLocalTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="30" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a858cd37c629a1ac4c26bc60bac50bc8f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int WindAngle</definition>
        <argsstring></argsstring>
        <name>WindAngle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="32" column="1"/>
        <referencedby refid="_sailing_navigation_8h_1a3c59f7119a4b9d03c153ce45f4c21c5d" compoundref="_sailing_navigation_8cpp" startline="432" endline="468">GetPointOfSail</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" prot="public" static="no" mutable="no">
        <type>HardwareSerial *</type>
        <definition>HardwareSerial* Serials[]</definition>
        <argsstring>[]</argsstring>
        <name>Serials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="34" column="1"/>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
        <referencedby refid="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" compoundref="_telemetry_logging_8cpp" startline="44" endline="60">TelemetryLogTime</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1ade07205432a39d14d82f5e28c3c3c8cf" prot="public" static="no" mutable="no">
        <type><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742" kindref="member">DecisionEventType</ref></type>
        <definition>DecisionEventType DecisionEvent</definition>
        <argsstring></argsstring>
        <name>DecisionEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="36" column="1"/>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a4e68978287be769969d1c58c14401c1a" prot="public" static="no" mutable="no">
        <type><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3" kindref="member">DecisionEventReasonType</ref></type>
        <definition>DecisionEventReasonType DecisionEventReason</definition>
        <argsstring></argsstring>
        <name>DecisionEventReason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="37" column="1"/>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a55df2469571176804b2adcd40c552f56" prot="public" static="no" mutable="no">
        <type><ref refid="struct_vessel_usage_counters_struct" kindref="compound">VesselUsageCountersStruct</ref></type>
        <definition>VesselUsageCountersStruct VesselUsageCounters</definition>
        <argsstring></argsstring>
        <name>VesselUsageCounters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1a7be67ca7fd944a9f5bd6dc5e770eb9d7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double SteeringServoOutput</definition>
        <argsstring></argsstring>
        <name>SteeringServoOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1adfad02f502f8da0da9ddc814a3cfd259" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double PowerSensorV</definition>
        <argsstring></argsstring>
        <name>PowerSensorV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_telemetry_logging_8cpp_1aea95619001504f641ab5c0b2f1f885dc" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double PowerSensorI</definition>
        <argsstring></argsstring>
        <name>PowerSensorI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="42" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TelemetryLogTime</definition>
        <argsstring>(int CommandPort)</argsstring>
        <name>TelemetryLogTime</name>
        <param>
          <type>int</type>
          <declname>CommandPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="44" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="44" bodyend="60"/>
        <references refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006">CommandPort</references>
        <references refid="struct_time_1ad99bb2472136eac523275c97ec27cd2e" compoundref="_g_p_s_8h" startline="23">Time::dayOfMonth</references>
        <references refid="struct_time_1a60a4ef2e2de0d8aaafe7992f7f5542e8" compoundref="_g_p_s_8h" startline="21">Time::hour</references>
        <references refid="struct_time_1a1094a46e03270001fda7ee1bb08b2f23" compoundref="_g_p_s_8h" startline="20">Time::minute</references>
        <references refid="struct_time_1a279cf834011dd08136310594ec5e45f4" compoundref="_g_p_s_8h" startline="24">Time::month</references>
        <references refid="struct_time_1a843c6d240942c2c884220156b135fcfc" compoundref="_g_p_s_8h" startline="19">Time::second</references>
        <references refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af">Serials</references>
        <references refid="struct_time_1a3e439c70f6a863677313d61cb151bcdb" compoundref="_g_p_s_8h" startline="25">Time::year</references>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1a7f31c903abd0d74edd169c2b84fb1b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TelemetryLogging_Event_Decisions</definition>
        <argsstring>(int CommandPort, word LoggingMask)</argsstring>
        <name>TelemetryLogging_Event_Decisions</name>
        <param>
          <type>int</type>
          <declname>CommandPort</declname>
        </param>
        <param>
          <type>word</type>
          <declname>LoggingMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="347" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="347" bodyend="362"/>
        <references refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006">CommandPort</references>
        <references refid="struct_state_values_struct_1a18691cbe7acc424d4e8f196119a5dd53" compoundref="_command_state___processor_8h" startline="33">StateValuesStruct::CommandState</references>
        <references refid="_telemetry_logging_8cpp_1a423068d07ce6b701c76aa5a642178ca5" compoundref="_telemetry_logging_8cpp" startline="382" endline="434">CommandStateToString</references>
        <references refid="_telemetry_logging_8cpp_1ade07205432a39d14d82f5e28c3c3c8cf">DecisionEvent</references>
        <references refid="_telemetry_logging_8cpp_1a4e68978287be769969d1c58c14401c1a">DecisionEventReason</references>
        <references refid="_telemetry_logging_8cpp_1aa65e04ac82e36146dbd76693c2cbd005" compoundref="_telemetry_logging_8cpp" startline="488" endline="549">DecisionEventReasonToString</references>
        <references refid="_telemetry_logging_8cpp_1a8b883936f30cc994ea34c686f10fbdfe" compoundref="_telemetry_logging_8cpp" startline="437" endline="486">DecisionEventToString</references>
        <references refid="_telemetry_logging_8h_1a2ddfd05bec2aa512a2cd1461ae6314dd" compoundref="_telemetry_logging_8h" startline="28">Log_Decisions</references>
        <references refid="struct_state_values_struct_1a1e5042befd9d49f50e64fd2797fbda80" compoundref="_command_state___processor_8h" startline="34">StateValuesStruct::mission_index</references>
        <references refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af">Serials</references>
        <references refid="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" compoundref="_telemetry_logging_8cpp" startline="44" endline="60">TelemetryLogTime</references>
        <referencedby refid="_command_state___processor_8h_1aa45fbfa8fbe030f162163fbf7a60fd43" compoundref="_command_state___processor_8cpp" startline="71" endline="175">CommandState_Processor</referencedby>
        <referencedby refid="_mission_8h_1a25f17f52c627403a54f0a1df3900a35a" compoundref="_mission_8cpp" startline="83" endline="180">IsMissionStepComplete</referencedby>
        <referencedby refid="_sailing_navigation_8h_1a6d4d4bc42c67913f3d1502ef8da8c9f3" compoundref="_sailing_navigation_8cpp" startline="288" endline="368">LimitToSailingCourse</referencedby>
        <referencedby refid="_loiter_8h_1a52d59bd2a6c37492c79ffdd2da5fb43f" compoundref="_loiter_8cpp" startline="28" endline="97">LoiterCalcCTS</referencedby>
        <referencedby refid="_sailing_navigation_8h_1adeaaa4e3ef0f85f11afc6fea531e4e83" compoundref="_sailing_navigation_8cpp" startline="211" endline="257">SetTack</referencedby>
        <referencedby refid="_sailing_navigation_8h_1ad027995fa7fb0c90f681e0ad9b6315de" compoundref="_sailing_navigation_8cpp" startline="39" endline="125">UpdateCourseToSteer</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1a423068d07ce6b701c76aa5a642178ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CommandStateToString</definition>
        <argsstring>(VesselCommandStateType CommandState)</argsstring>
        <name>CommandStateToString</name>
        <param>
          <type><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849" kindref="member">VesselCommandStateType</ref></type>
          <declname>CommandState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="382" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="382" bodyend="434"/>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a788434e058e81627c8b23e2785c5a146" compoundref="_command_state___processor_8h" startline="19">vcsFollowMission</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a4e3577b9131bff5af128607fd8ba0117" compoundref="_command_state___processor_8h" startline="17">vcsFullManual</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849adabd724d3ef0f9779c154b7217ca77ed" compoundref="_command_state___processor_8h" startline="16">vcsIdle</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a24b054787811ac78038bbfb8218aa510" compoundref="_command_state___processor_8h" startline="25">vcsLoiter</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849ab9f34ea97a85ffeb3c6478caab358972" compoundref="_command_state___processor_8h" startline="18">vcsPartialManual</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849acd42ee135e713ad2bd3ec7ca06fa1ce5" compoundref="_command_state___processor_8h" startline="24">vcsResetMissionIndex</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aed81b318c267cda354efbc6a79fa0f1d" compoundref="_command_state___processor_8h" startline="22">vcsReturnToHome</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a951462981e5580f78d5a7f1e6d4a015c" compoundref="_command_state___processor_8h" startline="23">vcsSetHome</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aabc769c72c93e1080f1943387c22cb00" compoundref="_command_state___processor_8h" startline="20">vcsSteerMagneticCourse</references>
        <references refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aedd9283fbe13f9b9f1c62d7a1b699db9" compoundref="_command_state___processor_8h" startline="21">vcsSteerWindCourse</references>
        <referencedby refid="_c_l_i_8h_1a54f9758437217bcf41254eb351b2b574" compoundref="_c_l_i_8cpp" startline="1240" endline="1592">ListParameter</referencedby>
        <referencedby refid="_s_d_card_log_file_8h_1a16ae785967afa3a4b5195dff58027499" compoundref="_s_d_card_log_file_8cpp" startline="689" endline="707">SD_Logging_Event_Decisions</referencedby>
        <referencedby refid="_telemetry_messages_8h_1ab8db9888c822003f042441e20ce1eb70" compoundref="_telemetry_messages_8cpp" startline="37" endline="325">SendMessage</referencedby>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1a8b883936f30cc994ea34c686f10fbdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String DecisionEventToString</definition>
        <argsstring>(DecisionEventType DecisionEvent)</argsstring>
        <name>DecisionEventToString</name>
        <param>
          <type><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742" kindref="member">DecisionEventType</ref></type>
          <declname>DecisionEvent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="437" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="437" bodyend="486"/>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a9a694068bf7bf699349323bb654f8eff" compoundref="_telemetry_logging_8h" startline="45">deChangeCommandState</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a3e12eb7b83cb01a4c2aa7335430d5b72" compoundref="_telemetry_logging_8h" startline="40">deEndOfMission</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a300124410707e5ccdc7b370c9ca1e15e" compoundref="_telemetry_logging_8h" startline="46">deHoldCourse</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a55b5c98c6360f06476f8b5ca84a088c0" compoundref="_telemetry_logging_8h" startline="38">deIncrementMissionIndex</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742abe686dae4dd42d5c358e1199c9a2826a" compoundref="_telemetry_logging_8h" startline="39">dePastWaypoint</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742aed0ee60c81a54d08b42803a448b9177a" compoundref="_telemetry_logging_8h" startline="41">deTackToPort</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742aac84f9ba2711b341c8f07b554ebccf29" compoundref="_telemetry_logging_8h" startline="43">deTackToPortRunning</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742ac2ba16bdf9606dca28ff2f3fd4aa6fcf" compoundref="_telemetry_logging_8h" startline="42">deTackToStarboard</references>
        <references refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a1c9adda82ff0b8c11b7ae8d0feada0f8" compoundref="_telemetry_logging_8h" startline="44">deTackToStarboardRunning</references>
        <referencedby refid="_s_d_card_log_file_8h_1a16ae785967afa3a4b5195dff58027499" compoundref="_s_d_card_log_file_8cpp" startline="689" endline="707">SD_Logging_Event_Decisions</referencedby>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1aa65e04ac82e36146dbd76693c2cbd005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String DecisionEventReasonToString</definition>
        <argsstring>(DecisionEventReasonType DecisionEventReason)</argsstring>
        <name>DecisionEventReasonToString</name>
        <param>
          <type><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3" kindref="member">DecisionEventReasonType</ref></type>
          <declname>DecisionEventReason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="488" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="488" bodyend="549"/>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a28b8ec55c3f68261296a317b2572d8c7" compoundref="_telemetry_logging_8h" startline="61">rApproachingWP</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3abc936ead52144e938653544d209f9e00" compoundref="_telemetry_logging_8h" startline="54">rFavouredTack</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a7975ea76c366c6657e2b357a675ab9d9" compoundref="_telemetry_logging_8h" startline="56">rLimitToSailingCourse</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3abd1038cf30435684eeecd11a48e43a23" compoundref="_telemetry_logging_8h" startline="60">rManualIntervention</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a5c816ade1654cd331855e741b8bdcaa4" compoundref="_telemetry_logging_8h" startline="55">rNoChange</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a0b4626116544de53cfc36f290e25eb73" compoundref="_telemetry_logging_8h" startline="59">rNone</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a208275f6c83e1e0a9b1335fe9bcceadf" compoundref="_telemetry_logging_8h" startline="53">rPastBoundary</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3ae9c6da8085dc71d047d32dab6f632b4d" compoundref="_telemetry_logging_8h" startline="52">rPastDuration</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3acca47118064ef0b2f9e55f85fd54c7f7" compoundref="_telemetry_logging_8h" startline="57">rPastLoiterBoundary</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a831d0afe5af1e2e365081caf05aeff4a" compoundref="_telemetry_logging_8h" startline="51">rPastTime</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a788353dd89cacf994ab952e7ce3a3294" compoundref="_telemetry_logging_8h" startline="50">rPastWaypoint</references>
        <references refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a216c2cce7f38d9051fddbe05b7d7b89a" compoundref="_telemetry_logging_8h" startline="58">rUnkown</references>
        <referencedby refid="_s_d_card_log_file_8h_1a16ae785967afa3a4b5195dff58027499" compoundref="_s_d_card_log_file_8cpp" startline="689" endline="707">SD_Logging_Event_Decisions</referencedby>
        <referencedby refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" compoundref="_telemetry_logging_8cpp" startline="347" endline="362">TelemetryLogging_Event_Decisions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1a71884706f22f4eddff74dec1ffa0615e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CourseTypeToString</definition>
        <argsstring>(SteeringCourseType CourseType)</argsstring>
        <name>CourseTypeToString</name>
        <param>
          <type><ref refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408" kindref="member">SteeringCourseType</ref></type>
          <declname>CourseType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="551" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="551" bodyend="576"/>
        <references refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408a08db7c069c3cd9d228c92c22e4cf1852" compoundref="_navigation_8h" startline="40">ctDirectToWayPoint</references>
        <references refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408aa49363e1c8f4573d4c67d80592e77b7c" compoundref="_navigation_8h" startline="41">ctPortTack</references>
        <references refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408a7412b44236ddf41e9e059a0b82d162af" compoundref="_navigation_8h" startline="42">ctStarboardTack</references>
        <referencedby refid="_o_l_e_d___logging_8h_1ab084bc4028d1894cbd1a5f1026493cc1" compoundref="_o_l_e_d___logging_8cpp" startline="134" endline="1238">OLED_Logging</referencedby>
        <referencedby refid="_s_d_card_log_file_8h_1a2da7a28b7c83f5ea4e1bd15b623feccb" compoundref="_s_d_card_log_file_8cpp" startline="446" endline="669">SD_Logging</referencedby>
      </memberdef>
      <memberdef kind="function" id="_telemetry_logging_8cpp_1aab19dbac151e7add0afcf035aad3f1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CourseTypeToString</definition>
        <argsstring>(ManoeuvreStateType ManoeuvreState)</argsstring>
        <name>CourseTypeToString</name>
        <param>
          <type><ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4" kindref="member">ManoeuvreStateType</ref></type>
          <declname>ManoeuvreState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" line="579" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp" bodystart="579" bodyend="607"/>
        <references refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4ab88b3abfd931022a589a104f72f21b45" compoundref="_navigation_8h" startline="55">mstCommence</references>
        <references refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4a2a38eaa61e779980add3b6b04b5cc167" compoundref="_navigation_8h" startline="57">mstComplete</references>
        <references refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4ae54d08f8a951822bfdb25a5aa687473b" compoundref="_navigation_8h" startline="54">mstNone</references>
        <references refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4aa3770d5ce2841bfcbea8a528759d9b7d" compoundref="_navigation_8h" startline="56">mstRunning</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Send<sp/>Telemetry<sp/>Data<sp/>back<sp/>to<sp/>the<sp/>Base<sp/>Station.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Data<sp/>of<sp/>different<sp/>types<sp/>and<sp/>detail,<sp/>are<sp/>sent<sp/>via<sp/>the<sp/>serial<sp/>port<sp/>in<sp/>accordance<sp/>with<sp/>the<sp/>specified<sp/>Telemetry<sp/>Level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.1<sp/>30/8/2016<sp/>updated<sp/>for<sp/>reorganisation<sp/>of<sp/>navigation<sp/>global<sp/>variables<sp/>into<sp/>a<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.2<sp/>3/9/2016<sp/>reorganised<sp/>for<sp/>logging<sp/>to<sp/>use<sp/>a<sp/>bit<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.3<sp/>2/11/2016<sp/>added<sp/>HDG<sp/>to<sp/>LOC<sp/>to<sp/>aid<sp/>the<sp/>Base<sp/>Station<sp/>Situation<sp/>Display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.4<sp/>11/11/2016<sp/>Added<sp/>Event<sp/>based<sp/>logging,<sp/>as<sp/>well<sp/>as<sp/>periodoc<sp/>logging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.5<sp/>29/10/2017<sp/>updated<sp/>for<sp/>new<sp/>IMU<sp/>BNO-055<sp/>rather<sp/>than<sp/>MPU-9250.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.6<sp/>30/10/2017<sp/>added<sp/>IMU<sp/>status<sp/>to<sp/>Attitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.7<sp/>12/11/2017<sp/>updated<sp/>to<sp/>change<sp/>BRL<sp/>to<sp/>RLB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>V1.8<sp/>25/5/2018<sp/>added<sp/>AWA<sp/>to<sp/>SIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_telemetry_logging_8h" kindref="compound">TelemetryLogging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_waypoints_8h" kindref="compound">Waypoints.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mission_8h" kindref="compound">Mission.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_g_p_s_8h" kindref="compound">GPS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_navigation_8h" kindref="compound">Navigation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_u_s_f_s___i_m_u_8h" kindref="compound">USFS_IMU.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_command_state___processor_8h" kindref="compound">CommandState_Processor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wear_tracking_8h" kindref="compound">WearTracking.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_navigation_data_type" kindref="compound">NavigationDataType</ref><sp/><ref refid="_telemetry_logging_8cpp_1a6e6c124a8544f54a81bb39badabb0342" kindref="member">NavData</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_state_values_struct" kindref="compound">StateValuesStruct</ref><sp/><ref refid="_telemetry_logging_8cpp_1a84903d3dde78582cbc92053c3c18d444" kindref="member">StateValues</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a6924c9cecb78ca1a791d8c5b2389a20e" kindref="member">loop_period_us</ref>;<sp/></highlight><highlight class="comment">//<sp/>microseconds<sp/>between<sp/>successive<sp/>main<sp/>loop<sp/>executions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_i_m_u_struct" kindref="compound">IMUStruct</ref><sp/><ref refid="_telemetry_logging_8cpp_1ab2750358545c3531197e99469fa8d2f4" kindref="member">myIMU</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1abfd08ed7f06fc22e2d32bd2a1e94fa3a" kindref="member">GPS_Last_Loc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>milliseconds<sp/>since<sp/>last<sp/>GPS<sp/>valid<sp/>location<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a1063514a8da815eb7c6ce64b11f55500" kindref="member">GPS_Last_Message</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>milliseconds<sp/>since<sp/>last<sp/>GPS<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a546169abc0a62fd2c162220444214ace" kindref="member">UseSimulatedGPS</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>to<sp/>disable<sp/>the<sp/>GPS<sp/>and<sp/>indicate<sp/>that<sp/>the<sp/>current<sp/>location<sp/>is<sp/>simulated<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_time" kindref="compound">Time</ref><sp/><ref refid="_telemetry_logging_8cpp_1a723236e33d541fe926aafbf860757e71" kindref="member">CurrentLocalTime</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a858cd37c629a1ac4c26bc60bac50bc8f" kindref="member">WindAngle</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wind<sp/>Angle<sp/>-<sp/>degrees<sp/>positive<sp/>angles<sp/>to<sp/>port,<sp/>negative<sp/>angles<sp/>to<sp/>starboard:<sp/>-180<sp/>to<sp/>0<sp/>to<sp/>+180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//extern<sp/>File<sp/>LogFile;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>HardwareSerial<sp/>*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742" kindref="member">DecisionEventType</ref><sp/><ref refid="_telemetry_logging_8cpp_1ade07205432a39d14d82f5e28c3c3c8cf" kindref="member">DecisionEvent</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>event<sp/>based<sp/>logging<sp/>and<sp/>diagnosis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3" kindref="member">DecisionEventReasonType</ref><sp/><ref refid="_telemetry_logging_8cpp_1a4e68978287be769969d1c58c14401c1a" kindref="member">DecisionEventReason</ref>;<sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>event<sp/>based<sp/>logging<sp/>and<sp/>diagnosis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_vessel_usage_counters_struct" kindref="compound">VesselUsageCountersStruct</ref><sp/><ref refid="_telemetry_logging_8cpp_1a55df2469571176804b2adcd40c552f56" kindref="member">VesselUsageCounters</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a7be67ca7fd944a9f5bd6dc5e770eb9d7" kindref="member">SteeringServoOutput</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1adfad02f502f8da0da9ddc814a3cfd259" kindref="member">PowerSensorV</ref>,<sp/><ref refid="_telemetry_logging_8cpp_1aea95619001504f641ab5c0b2f1f885dc" kindref="member">PowerSensorI</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" kindref="member">TelemetryLogTime</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.4<sp/>22/10/2016<sp/>updated<sp/>to<sp/>support<sp/>parameterised<sp/>serial<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;20&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1a3e439c70f6a863677313d61cb151bcdb" kindref="member">year</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1a279cf834011dd08136310594ec5e45f4" kindref="member">month</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1ad99bb2472136eac523275c97ec27cd2e" kindref="member">dayOfMonth</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1a60a4ef2e2de0d8aaafe7992f7f5542e8" kindref="member">hour</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1a1094a46e03270001fda7ee1bb08b2f23" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(CurrentLocalTime.<ref refid="struct_time_1a843c6d240942c2c884220156b135fcfc" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>TelemetryLogging(int<sp/>CommandPort,word<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>send<sp/>telemetry<sp/>data<sp/>based<sp/>on<sp/>selected<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.0<sp/>4/8/2016<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.1<sp/>3/9/2016<sp/>reorganised<sp/>for<sp/>logging<sp/>to<sp/>use<sp/>a<sp/>bit<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.2<sp/>9/10/2016<sp/>Added<sp/>COG,SOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.3<sp/>10/10/2016<sp/>Added<sp/>File<sp/>Size<sp/>to<sp/>SYS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.4<sp/>22/10/2016<sp/>updated<sp/>to<sp/>support<sp/>parameterised<sp/>serial<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.5<sp/>1/11/2016<sp/>changed<sp/>ATT<sp/>to<sp/>use<sp/>True<sp/>Hdg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.6<sp/>2/11/2016<sp/>added<sp/>Heading<sp/>to<sp/>LOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>V1.7<sp/>29/06/2019<sp/>added<sp/>IMU<sp/>status<sp/>to<sp/>Attitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>char<sp/>FloatString[16];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Location<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Location<sp/><sp/>loc<sp/>-<sp/>Time,<sp/>Lat,<sp/>Lon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;LOC,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.Currentloc.lat)<sp/>/<sp/>10000000UL,10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.Currentloc.lng)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.COG);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.SOG_mps);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.HDG);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Attitude<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Attitude<sp/>att<sp/>-<sp/>Time,<sp/>Compass<sp/>True,<sp/>Pitch,<sp/>Roll,<sp/>Status:<sp/>system-accel-gyro-mag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;ATT,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.HDG);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print((int)myIMU.pitch);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print((int)myIMU.roll);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(myIMU.Algorithm_Status);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Situation<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Situation<sp/>sit<sp/>-<sp/>Time,<sp/>BTW,<sp/>DTW,<sp/>CTE,<sp/>CDA,<sp/>AWA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;SIT,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.BTW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.DTW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.CTE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.CDA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.AWA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Waypoints<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Waypoints<sp/>way<sp/>-<sp/>Time,<sp/>previous<sp/>waypoint<sp/>Lat,<sp/>Lon,<sp/>next<sp/>waypoint<sp/>Lat,<sp/>Lon,<sp/>rumb<sp/>line<sp/>bearing,<sp/>max<sp/>CTE<sp/>or<sp/>Boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;WAY,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.prev_WP.lat)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.prev_WP.lng)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.next_WP.lat)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.next_WP.lng)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.RLB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.MaxCTE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//if<sp/>(Log_Mission<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>//<sp/>Log_Mission<sp/><sp/>mis<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>(*Serials[CommandPort]).print(F(&quot;MIS,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>(*Serials[CommandPort]).print(StateValues.mission_index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>(*Serials[CommandPort]).println(StateValues.CommandState);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Sailing<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Sailing<sp/><sp/>sai<sp/>-<sp/>Time,<sp/>CTS,<sp/>HDG,<sp/>BTW,<sp/>AWA,<sp/><sp/><sp/>CTE<sp/>,<sp/>Max<sp/>CTE<sp/>,TackTime,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;SAI,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.CTS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.HDG);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.BTW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.AWA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.CTE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.MaxCTE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.TackDuration);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Navigation<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Navigation<sp/>nav<sp/>-<sp/>Time,<sp/>BTW,<sp/>DTW,<sp/>RLB,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;NAV,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.BTW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(NavData.DTW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println(NavData.RLB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_System<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_System<sp/>=<sp/>0x0080;<sp/>//<sp/>sys,<sp/>looptime,<sp/>Vessel<sp/>CommandState</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;SYS,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(loop_period_us);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(LogFile.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println(StateValues.CommandState);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_GPS<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_GPS<sp/>=<sp/>0x0100;<sp/>//<sp/><sp/>GPS<sp/>state<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;GPS,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.Currentloc.lat)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(dtostrf(float(NavData.Currentloc.lng)<sp/>/<sp/>10000000UL,<sp/>10,<sp/>5,<sp/>FloatString));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(GPS_Last_Loc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(GPS_Last_Message);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(UseSimulatedGPS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(GPS_LocationIs_Valid(NavData.Currentloc));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_ServoOut<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_ServoOut<sp/>=<sp/>0x0400;<sp/>//<sp/>SVO<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;SVO,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(SteeringServoOutput);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//(*Serials[CommandPort]).print(DriveMotor.DriveMotorServoOutput);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Voltages<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Voltages<sp/>=<sp/>0x0800;<sp/>//<sp/>Voltage<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;VLT,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(0);<sp/><sp/>//<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(0);<sp/><sp/>//<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(PowerSensorV);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(PowerSensorI);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>TelemetryLogging_Init(int<sp/>CommandPort,<sp/>word<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>telemetry<sp/>logging<sp/>Header<sp/>based<sp/>on<sp/>selected<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>3/9/2016<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.1<sp/>9/10/2016<sp/>Added<sp/>COG,SOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.1<sp/>22/10/2016<sp/>updated<sp/>to<sp/>support<sp/>parameterised<sp/>serial<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.2<sp/>29/06/2019<sp/>added<sp/>IMU<sp/>status<sp/>to<sp/>Attitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Location<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Location<sp/><sp/>loc<sp/>-<sp/>Time,<sp/>Lat,<sp/>Lon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;LOC,YYYY,MM,DD,HH,mm,ss,LAT,LON,COG,SOG,HDG&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Attitude<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Attitude<sp/>att<sp/>-<sp/>Time,<sp/>Compass<sp/>True,<sp/>Pitch,<sp/>Roll,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;ATT,YYYY,MM,DD,HH,mm,ss,HDG,Pitch,Roll,Status&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Situation<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Situation<sp/>sit<sp/>-<sp/>Time,<sp/>BTW,<sp/>DTW,<sp/>CTE,<sp/>CDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;SIT,YYYY,MM,DD,HH,mm,ss,BTW,DTW,CTE,CDA,AWA&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Waypoints<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Waypoints<sp/>way<sp/>-<sp/>Time,<sp/>previous<sp/>waypoint<sp/>Lat,<sp/>Lon,<sp/>next<sp/>waypoint<sp/>Lat,<sp/>Lon,<sp/>RLB,<sp/>MaxCTE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;WAY,YYYY,MM,DD,HH,mm,ss,LAT,LON,LAT,LON,RLB,MaxCTE&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Mission<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Mission<sp/><sp/>mis<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;MIS,YYYY,MM,DD,HH,mm,ss,MI,CS&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Sailing<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Sailing<sp/><sp/>sai<sp/>-<sp/>Time,<sp/>CTS,<sp/>HDG,<sp/>BTW,<sp/>AWA,<sp/><sp/><sp/>CTE<sp/>,<sp/>Max<sp/>CTE<sp/>,TackTime,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;SAI,YYYY,MM,DD,HH,mm,ss,CTS,HDG,BTW,AWA,CTE,Max<sp/>CTE,TT&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Navigation<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Navigation<sp/>nav<sp/>-<sp/>Time,<sp/>BTW,<sp/>DTW,<sp/>RLB,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;NAV,YYYY,MM,DD,HH,mm,ss,BTW,DTW,RLB&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_System<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_System<sp/>=<sp/>0x0080;<sp/>//<sp/>sys,<sp/>looptime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;SYS,YYYY,MM,DD,HH,mm,ss,Loop,CS&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_GPS<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_GPS<sp/>=<sp/>0x0100;<sp/>//<sp/><sp/>GPS<sp/>state<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;GPS,YYYY,MM,DD,HH,mm,ss,LAT,LON,Last_Loc,Last_Msg,SimulatedGPS,Loc_Valid&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Decisions<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Decisions<sp/>=<sp/>0x0200;<sp/>//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;DEC,YYYY,MM,DD,HH,mm,ss,MI,CS,DE,DER&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_ServoOut<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_ServoOut<sp/>=<sp/>0x0400;<sp/>//<sp/>SVO<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;SVO,YYYY,MM,DD,HH,mm,ss,STR,MOT&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Voltages<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Voltages<sp/>=<sp/>0x0800;<sp/>//<sp/>VLT<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;VLT,YYYY,MM,DD,HH,mm,ss,Vm0,Vm1,PSV,PSI&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Log_Usage<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Log_Mission<sp/><sp/>mis<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;USE,YYYY,MM,DD,HH,mm,ss,10min,PortRudder,StarboardRudder,TrimTabCounter&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>TelemetryLogging_Event_Mission(int<sp/>CommandPort,<sp/>word<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>send<sp/>telemetry<sp/>data<sp/>based<sp/>on<sp/>selected<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Mission<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Mission<sp/><sp/>mis<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;MIS,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(StateValues.mission_index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println(CommandStateToString(StateValues.CommandState));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="_telemetry_logging_8h_1a7f31c903abd0d74edd169c2b84fb1b10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8cpp_1a7f31c903abd0d74edd169c2b84fb1b10" kindref="member">TelemetryLogging_Event_Decisions</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>,<sp/>word<sp/>LoggingMask)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_telemetry_logging_8h_1a2ddfd05bec2aa512a2cd1461ae6314dd" kindref="member">Log_Decisions</ref><sp/>&amp;<sp/>LoggingMask)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log_Decisions<sp/><sp/>Dec<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;DEC,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_telemetry_logging_8cpp_1a1bb2ce9acb1f8799f3148e4b8633419f" kindref="member">TelemetryLogTime</ref>(CommandPort);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(StateValues.<ref refid="struct_state_values_struct_1a1e5042befd9d49f50e64fd2797fbda80" kindref="member">mission_index</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(<ref refid="_telemetry_logging_8cpp_1a423068d07ce6b701c76aa5a642178ca5" kindref="member">CommandStateToString</ref>(StateValues.<ref refid="struct_state_values_struct_1a18691cbe7acc424d4e8f196119a5dd53" kindref="member">CommandState</ref>));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(<ref refid="_telemetry_logging_8cpp_1a8b883936f30cc994ea34c686f10fbdfe" kindref="member">DecisionEventToString</ref>(<ref refid="_telemetry_logging_8cpp_1ade07205432a39d14d82f5e28c3c3c8cf" kindref="member">DecisionEvent</ref>));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_telemetry_logging_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(<ref refid="_telemetry_logging_8cpp_1aa65e04ac82e36146dbd76693c2cbd005" kindref="member">DecisionEventReasonToString</ref>(<ref refid="_telemetry_logging_8cpp_1a4e68978287be769969d1c58c14401c1a" kindref="member">DecisionEventReason</ref>));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>TelemetryLogging_Event_Usage(int<sp/>CommandPort,<sp/>word<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Log_Usage<sp/>&amp;<sp/>LoggingMask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log_Usage<sp/><sp/>mis<sp/>-<sp/>Time,<sp/>mission<sp/>index,<sp/>command<sp/>state<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(F(&quot;USE,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TelemetryLogTime(CommandPort);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(VesselUsageCounters.intervalCounter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(VesselUsageCounters.PortRudderCounter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(VesselUsageCounters.StarboardRudderCounter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(&quot;,&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).print(VesselUsageCounters.TrimTabCounter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>(*Serials[CommandPort]).println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="_telemetry_logging_8h_1a423068d07ce6b701c76aa5a642178ca5" refkind="member"><highlight class="normal">String<sp/><ref refid="_telemetry_logging_8cpp_1a423068d07ce6b701c76aa5a642178ca5" kindref="member">CommandStateToString</ref>(<ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849" kindref="member">VesselCommandStateType</ref><sp/>CommandState)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>a<sp/>string<sp/>version<sp/>of<sp/>the<sp/>CommandState<sp/>enumnerated<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>21/4/2019<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>CommandStateAsString;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(CommandState)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a788434e058e81627c8b23e2785c5a146" kindref="member">VesselCommandStateType::vcsFollowMission</ref>:</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;FollowMission&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a4e3577b9131bff5af128607fd8ba0117" kindref="member">VesselCommandStateType::vcsFullManual</ref>:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;FullManual&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849adabd724d3ef0f9779c154b7217ca77ed" kindref="member">VesselCommandStateType::vcsIdle</ref>:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Idle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a24b054787811ac78038bbfb8218aa510" kindref="member">VesselCommandStateType::vcsLoiter</ref>:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Loiter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849ab9f34ea97a85ffeb3c6478caab358972" kindref="member">VesselCommandStateType::vcsPartialManual</ref>:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PartialManual&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849acd42ee135e713ad2bd3ec7ca06fa1ce5" kindref="member">VesselCommandStateType::vcsResetMissionIndex</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;ResetMissionIndex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aed81b318c267cda354efbc6a79fa0f1d" kindref="member">VesselCommandStateType::vcsReturnToHome</ref>:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;ReturnToHome&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849a951462981e5580f78d5a7f1e6d4a015c" kindref="member">VesselCommandStateType::vcsSetHome</ref>:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;SetHome&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aabc769c72c93e1080f1943387c22cb00" kindref="member">VesselCommandStateType::vcsSteerMagneticCourse</ref>:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;SteerMagneticCourse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_command_state___processor_8h_1ad6c3f1694dc706db045d7e47aea8c849aedd9283fbe13f9b9f1c62d7a1b699db9" kindref="member">VesselCommandStateType::vcsSteerWindCourse</ref>:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;SteerWindCourse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>CommandStateAsString;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="_telemetry_logging_8h_1a8b883936f30cc994ea34c686f10fbdfe" refkind="member"><highlight class="normal">String<sp/><ref refid="_telemetry_logging_8cpp_1a8b883936f30cc994ea34c686f10fbdfe" kindref="member">DecisionEventToString</ref>(<ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742" kindref="member">DecisionEventType</ref><sp/><ref refid="_telemetry_logging_8cpp_1ade07205432a39d14d82f5e28c3c3c8cf" kindref="member">DecisionEvent</ref>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>a<sp/>string<sp/>version<sp/>of<sp/>the<sp/>DecisionEvent<sp/>enumnerated<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>21/4/2019<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.1<sp/>13/6/2019<sp/>added<sp/>deHoldCourse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>DecisionEventAsString;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(DecisionEvent)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a3e12eb7b83cb01a4c2aa7335430d5b72" kindref="member">DecisionEventType::deEndOfMission</ref>:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;EndOfMission&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a55b5c98c6360f06476f8b5ca84a088c0" kindref="member">DecisionEventType::deIncrementMissionIndex</ref>:</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;IncrementMissionIndex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742abe686dae4dd42d5c358e1199c9a2826a" kindref="member">DecisionEventType::dePastWaypoint</ref>:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastWaypoint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742aed0ee60c81a54d08b42803a448b9177a" kindref="member">DecisionEventType::deTackToPort</ref>:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;toPortTack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742ac2ba16bdf9606dca28ff2f3fd4aa6fcf" kindref="member">DecisionEventType::deTackToStarboard</ref>:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;toStarboardTack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742aac84f9ba2711b341c8f07b554ebccf29" kindref="member">DecisionEventType::deTackToPortRunning</ref>:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;toPortTackRunning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a1c9adda82ff0b8c11b7ae8d0feada0f8" kindref="member">DecisionEventType::deTackToStarboardRunning</ref>:</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;toStarboardTackRunning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a9a694068bf7bf699349323bb654f8eff" kindref="member">DecisionEventType::deChangeCommandState</ref>:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;ChangeCommandState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a6cbcc59f93ea8d5a2d807c3ca756c742a300124410707e5ccdc7b370c9ca1e15e" kindref="member">DecisionEventType::deHoldCourse</ref>:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;HoldCourse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DecisionEventAsString;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="_telemetry_logging_8h_1aa65e04ac82e36146dbd76693c2cbd005" refkind="member"><highlight class="normal">String<sp/><ref refid="_telemetry_logging_8cpp_1aa65e04ac82e36146dbd76693c2cbd005" kindref="member">DecisionEventReasonToString</ref>(<ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3" kindref="member">DecisionEventReasonType</ref><sp/><ref refid="_telemetry_logging_8cpp_1a4e68978287be769969d1c58c14401c1a" kindref="member">DecisionEventReason</ref>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>a<sp/>string<sp/>version<sp/>of<sp/>the<sp/>DecisionEvent<sp/>enumnerated<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>21/4/2019<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.1<sp/>13/6/2019<sp/>added<sp/>rApproachingWP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>DecisionEventReasonAsString;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(DecisionEventReason)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3abc936ead52144e938653544d209f9e00" kindref="member">DecisionEventReasonType::rFavouredTack</ref>:</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;FavouredTack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a5c816ade1654cd331855e741b8bdcaa4" kindref="member">DecisionEventReasonType::rNoChange</ref>:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;NoChange&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a208275f6c83e1e0a9b1335fe9bcceadf" kindref="member">DecisionEventReasonType::rPastBoundary</ref>:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastBoundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3ae9c6da8085dc71d047d32dab6f632b4d" kindref="member">DecisionEventReasonType::rPastDuration</ref>:</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastDuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a831d0afe5af1e2e365081caf05aeff4a" kindref="member">DecisionEventReasonType::rPastTime</ref>:</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a788353dd89cacf994ab952e7ce3a3294" kindref="member">DecisionEventReasonType::rPastWaypoint</ref>:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastWaypoint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a216c2cce7f38d9051fddbe05b7d7b89a" kindref="member">DecisionEventReasonType::rUnkown</ref>:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Unkown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a7975ea76c366c6657e2b357a675ab9d9" kindref="member">DecisionEventReasonType::rLimitToSailingCourse</ref>:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;LimitToSailingCourse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3acca47118064ef0b2f9e55f85fd54c7f7" kindref="member">DecisionEventReasonType::rPastLoiterBoundary</ref>:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PastLoiterBoundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a0b4626116544de53cfc36f290e25eb73" kindref="member">DecisionEventReasonType::rNone</ref>:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3abd1038cf30435684eeecd11a48e43a23" kindref="member">DecisionEventReasonType::rManualIntervention</ref>:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;ManualIntervention&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_telemetry_logging_8h_1a1261fc1bbec34685101a32cee8aad0b3a28b8ec55c3f68261296a317b2572d8c7" kindref="member">DecisionEventReasonType::rApproachingWP</ref>:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;ApproachingWP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecisionEventReasonAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DecisionEventReasonAsString;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="_telemetry_logging_8h_1a71884706f22f4eddff74dec1ffa0615e" refkind="member"><highlight class="normal">String<sp/><ref refid="_telemetry_logging_8cpp_1a71884706f22f4eddff74dec1ffa0615e" kindref="member">CourseTypeToString</ref>(<ref refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408" kindref="member">SteeringCourseType</ref><sp/>CourseType)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>a<sp/>string<sp/>version<sp/>of<sp/>the<sp/>CourseType<sp/>enumnerated<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>5/5/2019<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>CourseTypeAsString;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(CourseType)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408a08db7c069c3cd9d228c92c22e4cf1852" kindref="member">SteeringCourseType::ctDirectToWayPoint</ref>:</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CourseTypeAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;DirectToWayPoint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408aa49363e1c8f4573d4c67d80592e77b7c" kindref="member">SteeringCourseType::ctPortTack</ref>:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CourseTypeAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;PortTack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1a6fa89415761828fd23bc83ddf6c13408a7412b44236ddf41e9e059a0b82d162af" kindref="member">SteeringCourseType::ctStarboardTack</ref>:</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CourseTypeAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;StarboardTack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CourseTypeAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CourseTypeAsString;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="_telemetry_logging_8h_1aab19dbac151e7add0afcf035aad3f1b7" refkind="member"><highlight class="normal">String<sp/><ref refid="_telemetry_logging_8cpp_1a71884706f22f4eddff74dec1ffa0615e" kindref="member">CourseTypeToString</ref>(<ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4" kindref="member">ManoeuvreStateType</ref><sp/>ManoeuvreState)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>return<sp/>a<sp/>string<sp/>version<sp/>of<sp/>the<sp/>ManoeuvreState<sp/>enumnerated<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>29/5/2019<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>ManoeuvreStateAsString;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ManoeuvreState)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4ab88b3abfd931022a589a104f72f21b45" kindref="member">ManoeuvreStateType::mstCommence</ref>:</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManoeuvreStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Commence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4a2a38eaa61e779980add3b6b04b5cc167" kindref="member">ManoeuvreStateType::mstComplete</ref>:</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManoeuvreStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Complete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4ae54d08f8a951822bfdb25a5aa687473b" kindref="member">ManoeuvreStateType::mstNone</ref>:</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManoeuvreStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_navigation_8h_1af60aeecb729ff50a287cc87b1ea289e4aa3770d5ce2841bfcbea8a528759d9b7d" kindref="member">ManoeuvreStateType::mstRunning</ref>:</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManoeuvreStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManoeuvreStateAsString<sp/>=<sp/>F(</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ManoeuvreStateAsString;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/TelemetryLogging.cpp"/>
  </compounddef>
</doxygen>
