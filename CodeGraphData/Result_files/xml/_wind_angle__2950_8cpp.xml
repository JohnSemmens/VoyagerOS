<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_wind_angle__2950_8cpp" kind="file">
    <compoundname>WindAngle_2950.cpp</compoundname>
    <includes refid="_wind_angle__2950_8h" local="yes">WindAngle_2950.h</includes>
    <includes local="no">Wire.h</includes>
    <includes refid="_m_p_u9250_8h" local="yes">MPU9250.h</includes>
    <includes refid="location_8h" local="yes">location.h</includes>
    <includes refid="config_values_8h" local="yes">configValues.h</includes>
    <incdepgraph>
      <node id="1012">
        <label>SPI.h</label>
      </node>
      <node id="1016">
        <label>Waypoints.h</label>
        <link refid="_waypoints_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
      </node>
      <node id="1015">
        <label>Navigation.h</label>
        <link refid="_navigation_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1016" relation="include">
        </childnode>
      </node>
      <node id="1014">
        <label>configValues.h</label>
        <link refid="config_values_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
        <childnode refid="1017" relation="include">
        </childnode>
      </node>
      <node id="1010">
        <label>Wire.h</label>
      </node>
      <node id="1008">
        <label>WindAngle_2950.h</label>
        <link refid="_wind_angle__2950_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
      </node>
      <node id="1011">
        <label>MPU9250.h</label>
        <link refid="_m_p_u9250_8h"/>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
      </node>
      <node id="1009">
        <label>arduino.h</label>
      </node>
      <node id="1013">
        <label>location.h</label>
        <link refid="location_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
      </node>
      <node id="1017">
        <label>CommandState_Processor.h</label>
        <link refid="_command_state___processor_8h"/>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1016" relation="include">
        </childnode>
      </node>
      <node id="1007">
        <label>D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp</label>
        <link refid="WindAngle_2950.cpp"/>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" prot="public" static="no" mutable="no">
        <type>const byte</type>
        <definition>const byte MPU9250_ID</definition>
        <argsstring></argsstring>
        <name>MPU9250_ID</name>
        <initializer>= 0x71</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="39" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="39" bodyend="-1"/>
        <referencedby refid="_wind_angle__2950_8h_1a37c1ab62af781b700d0926c56b21f6c5" compoundref="_wind_angle__2950_8cpp" startline="49" endline="147">WingSailAngleSensor_Init</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_wind_angle__2950_8cpp_1a15ba24e40e95c7684d214548cce20fb3" prot="public" static="no" mutable="no">
        <type>const byte</type>
        <definition>const byte MPU9255_ID</definition>
        <argsstring></argsstring>
        <name>MPU9255_ID</name>
        <initializer>= 0x73</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="40" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="40" bodyend="-1"/>
        <referencedby refid="_wind_angle__2950_8h_1a37c1ab62af781b700d0926c56b21f6c5" compoundref="_wind_angle__2950_8cpp" startline="49" endline="147">WingSailAngleSensor_Init</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_wind_angle__2950_8cpp_1a13974f1660839d8bc696129bad2abf64" prot="public" static="no" mutable="no">
        <type><ref refid="class_m_p_u9250" kindref="compound">MPU9250</ref></type>
        <definition>MPU9250 WingSailAngleSensor</definition>
        <argsstring></argsstring>
        <name>WingSailAngleSensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_wind_angle__2950_8cpp_1a1106f1eecd15a9233233ae672d651265" prot="public" static="no" mutable="no">
        <type><ref refid="structconfig_values_type" kindref="compound">configValuesType</ref></type>
        <definition>configValuesType Configuration</definition>
        <argsstring></argsstring>
        <name>Configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" prot="public" static="no" mutable="no">
        <type>HardwareSerial *</type>
        <definition>HardwareSerial* Serials[]</definition>
        <argsstring>[]</argsstring>
        <name>Serials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="47" column="1"/>
        <referencedby refid="_wind_angle__2950_8h_1a37c1ab62af781b700d0926c56b21f6c5" compoundref="_wind_angle__2950_8cpp" startline="49" endline="147">WingSailAngleSensor_Init</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_wind_angle__2950_8cpp_1a37c1ab62af781b700d0926c56b21f6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WingSailAngleSensor_Init</definition>
        <argsstring>(int CommandPort)</argsstring>
        <name>WingSailAngleSensor_Init</name>
        <param>
          <type>int</type>
          <declname>CommandPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="49" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="49" bodyend="147"/>
        <references refid="class_m_p_u9250_1a7b0e6389baccd5592c95cae9d24d1317" compoundref="_m_p_u9250_8h" startline="231">MPU9250::accelBias</references>
        <references refid="class_m_p_u9250_1aeac1ae4402a4eb9a74bea5ad8af929c1" compoundref="_m_p_u9250_8cpp" startline="211" endline="356">MPU9250::calibrateMPU9250</references>
        <references refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006">CommandPort</references>
        <references refid="class_m_p_u9250_1a4fc2232b3fdbd61bc1024c86842ddf9a" compoundref="_m_p_u9250_8h" startline="231">MPU9250::gyroBias</references>
        <references refid="class_m_p_u9250_1aab7b6d912fdc88c4fedfad90abe2aeab" compoundref="_m_p_u9250_8cpp" startline="128" endline="147">MPU9250::initAK8963</references>
        <references refid="class_m_p_u9250_1a71de2142b4440cd5a0e99066f9890e27" compoundref="_m_p_u9250_8h" startline="269">MPU9250::Initialsed</references>
        <references refid="class_m_p_u9250_1a03803202142ac461867daa9dd06fdd80" compoundref="_m_p_u9250_8cpp" startline="149" endline="205">MPU9250::initMPU9250</references>
        <references refid="_wind_angle__2950_8cpp_1a5ad216273a9dcd578de2e0e683571164" compoundref="_wind_angle__2950_8cpp" startline="267" endline="278">Load_IMU_Calibation_Values</references>
        <references refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" compoundref="_m_p_u9250_8h" startline="229">MPU9250::magCalibration</references>
        <references refid="class_m_p_u9250_1a8f60e4e9a6511c9a5bc6a437484dab0f" compoundref="_m_p_u9250_8h" startline="250">MPU9250::MagneticAngleCalibrationMode</references>
        <references refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" compoundref="_m_p_u9250_8h" startline="176">MPU9250_ADDRESS</references>
        <references refid="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" compoundref="_wind_angle__2950_8cpp" startline="39">MPU9250_ID</references>
        <references refid="class_m_p_u9250_1ad3bbdef687191a70354ee2f900352993" compoundref="_m_p_u9250_8cpp" startline="360" endline="442">MPU9250::MPU9250SelfTest</references>
        <references refid="_wind_angle__2950_8cpp_1a15ba24e40e95c7684d214548cce20fb3" compoundref="_wind_angle__2950_8cpp" startline="40">MPU9255_ID</references>
        <references refid="class_m_p_u9250_1a846032e6a6d737f4ff62065ca0e1568f" compoundref="_m_p_u9250_8cpp" startline="454" endline="463">MPU9250::readByte</references>
        <references refid="class_m_p_u9250_1ae9bbaec48bb667684b5d383c8a3c7504" compoundref="_m_p_u9250_8h" startline="232">MPU9250::SelfTest</references>
        <references refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af">Serials</references>
        <references refid="_m_p_u9250_8h_1a1f3713ef719334aabf2d198255a14b90" compoundref="_m_p_u9250_8h" startline="162">WHO_AM_I_MPU9250</references>
      </memberdef>
      <memberdef kind="function" id="_wind_angle__2950_8cpp_1a615f47fff7cac855df68d4e7eae7deff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IMU_Mag_Init</definition>
        <argsstring>(void)</argsstring>
        <name>IMU_Mag_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="149" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="149" bodyend="163"/>
        <references refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mx</references>
        <references refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" compoundref="_m_p_u9250_8h" startline="237">MPU9250::mx_max</references>
        <references refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" compoundref="_m_p_u9250_8h" startline="236">MPU9250::mx_min</references>
        <references refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" compoundref="_m_p_u9250_8h" startline="227">MPU9250::my</references>
        <references refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" compoundref="_m_p_u9250_8h" startline="239">MPU9250::my_max</references>
        <references refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" compoundref="_m_p_u9250_8h" startline="238">MPU9250::my_min</references>
        <references refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mz</references>
        <references refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" compoundref="_m_p_u9250_8h" startline="241">MPU9250::mz_max</references>
        <references refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" compoundref="_m_p_u9250_8h" startline="240">MPU9250::mz_min</references>
        <references refid="_wind_angle__2950_8cpp_1a8de6420d60657c8e1678c6c0d3bff464" compoundref="_wind_angle__2950_8cpp" startline="194" endline="263">WingSailAngleSensor_Read</references>
        <referencedby refid="_c_l_i_8h_1a0f12c566040e53c27b128289bb017c70" compoundref="_c_l_i_8cpp" startline="103" endline="1238">CLI_Processor</referencedby>
      </memberdef>
      <memberdef kind="function" id="_wind_angle__2950_8cpp_1a9db0f166dba1a55795c2013eb93034af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IMU_Mag_Calibrate</definition>
        <argsstring>(void)</argsstring>
        <name>IMU_Mag_Calibrate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="165" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="165" bodyend="192"/>
        <references refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mx</references>
        <references refid="structconfig_values_type_1a5c9f8e7fac316e921c900b245d3ab8e5" compoundref="config_values_8h" startline="124">configValuesType::mx_max</references>
        <references refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" compoundref="_m_p_u9250_8h" startline="237">MPU9250::mx_max</references>
        <references refid="structconfig_values_type_1a0876ce5174fefcd0b39cccee44eca68a" compoundref="config_values_8h" startline="123">configValuesType::mx_min</references>
        <references refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" compoundref="_m_p_u9250_8h" startline="236">MPU9250::mx_min</references>
        <references refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" compoundref="_m_p_u9250_8h" startline="227">MPU9250::my</references>
        <references refid="structconfig_values_type_1aac3f9de446641e39b318ba8f23ca12ce" compoundref="config_values_8h" startline="126">configValuesType::my_max</references>
        <references refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" compoundref="_m_p_u9250_8h" startline="239">MPU9250::my_max</references>
        <references refid="structconfig_values_type_1ab7c1874d390dec419ff4d54ce11b6ebd" compoundref="config_values_8h" startline="125">configValuesType::my_min</references>
        <references refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" compoundref="_m_p_u9250_8h" startline="238">MPU9250::my_min</references>
        <references refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mz</references>
        <references refid="structconfig_values_type_1a6758579cc2d41935882eab00baf129f5" compoundref="config_values_8h" startline="128">configValuesType::mz_max</references>
        <references refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" compoundref="_m_p_u9250_8h" startline="241">MPU9250::mz_max</references>
        <references refid="structconfig_values_type_1a1be1ac022e4efe86be6f72be280c2dac" compoundref="config_values_8h" startline="127">configValuesType::mz_min</references>
        <references refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" compoundref="_m_p_u9250_8h" startline="240">MPU9250::mz_min</references>
        <referencedby refid="_wind_angle__2950_8h_1a8de6420d60657c8e1678c6c0d3bff464" compoundref="_wind_angle__2950_8cpp" startline="194" endline="263">WingSailAngleSensor_Read</referencedby>
      </memberdef>
      <memberdef kind="function" id="_wind_angle__2950_8cpp_1a8de6420d60657c8e1678c6c0d3bff464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WingSailAngleSensor_Read</definition>
        <argsstring>(void)</argsstring>
        <name>WingSailAngleSensor_Read</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="194" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="194" bodyend="263"/>
        <references refid="class_m_p_u9250_1adb56df6ceaf1dc204f97270540ac8b14" compoundref="_m_p_u9250_8h" startline="234">MPU9250::accelCount</references>
        <references refid="class_m_p_u9250_1afa89af2772cead0f76a4ddd92ec5f6a8" compoundref="_m_p_u9250_8h" startline="225">MPU9250::aRes</references>
        <references refid="class_m_p_u9250_1aea8a7622821bf8aca55fcef71d91e29f" compoundref="_m_p_u9250_8h" startline="227">MPU9250::ax</references>
        <references refid="class_m_p_u9250_1a5129e95dbe12544fa34cc53b5644ff71" compoundref="_m_p_u9250_8h" startline="227">MPU9250::ay</references>
        <references refid="class_m_p_u9250_1a8ab7a335476e40a26aba80f867ac7da9" compoundref="_m_p_u9250_8h" startline="227">MPU9250::az</references>
        <references refid="class_m_p_u9250_1a9d231520d019ba7879c60ef7b72707a5" compoundref="_m_p_u9250_8h" startline="217">MPU9250::count</references>
        <references refid="class_m_p_u9250_1a4d6b6338685120de2e21aa30d9d89389" compoundref="_m_p_u9250_8h" startline="215">MPU9250::delt_t</references>
        <references refid="class_m_p_u9250_1a1c7dba3645913bf97f8b47d2bd4af2b0" compoundref="_m_p_u9250_8cpp" startline="44" endline="63">MPU9250::getAres</references>
        <references refid="class_m_p_u9250_1afd804ec9bd68961fc0084af461104304" compoundref="_m_p_u9250_8cpp" startline="23" endline="42">MPU9250::getGres</references>
        <references refid="class_m_p_u9250_1ab6b113da9b2fb006eb44dc8078e699c5" compoundref="_m_p_u9250_8cpp" startline="9" endline="21">MPU9250::getMres</references>
        <references refid="class_m_p_u9250_1a2c137b20138d3c80c4828691d5656d92" compoundref="_m_p_u9250_8h" startline="225">MPU9250::gRes</references>
        <references refid="class_m_p_u9250_1a59b6d7bd37738bac258da24ad330feef" compoundref="_m_p_u9250_8h" startline="227">MPU9250::gx</references>
        <references refid="class_m_p_u9250_1a126311c382d2667b7bc7cbe1f9b38b51" compoundref="_m_p_u9250_8h" startline="227">MPU9250::gy</references>
        <references refid="class_m_p_u9250_1a14ab2e2ab741ca245007cb9a134e07f3" compoundref="_m_p_u9250_8h" startline="222">MPU9250::gyroCount</references>
        <references refid="class_m_p_u9250_1a756658ca06a3807ef426ab87022a15c9" compoundref="_m_p_u9250_8h" startline="227">MPU9250::gz</references>
        <references refid="_wind_angle__2950_8cpp_1a9db0f166dba1a55795c2013eb93034af" compoundref="_wind_angle__2950_8cpp" startline="165" endline="192">IMU_Mag_Calibrate</references>
        <references refid="_m_p_u9250_8h_1a62cba161837810295654c3cc2de959a6" compoundref="_m_p_u9250_8h" startline="104">INT_STATUS</references>
        <references refid="class_m_p_u9250_1a0e05494e9b3bec043cd890f0bc8917c9" compoundref="_m_p_u9250_8h" startline="229">MPU9250::magbias</references>
        <references refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" compoundref="_m_p_u9250_8h" startline="229">MPU9250::magCalibration</references>
        <references refid="class_m_p_u9250_1aff92db5334c43a72f5c2f1fc8ee6f596" compoundref="_m_p_u9250_8h" startline="223">MPU9250::magCount</references>
        <references refid="class_m_p_u9250_1add8846692e3550adc9a6a95517aec4d5" compoundref="_m_p_u9250_8h" startline="243">MPU9250::MagneticAngle</references>
        <references refid="class_m_p_u9250_1a8f60e4e9a6511c9a5bc6a437484dab0f" compoundref="_m_p_u9250_8h" startline="250">MPU9250::MagneticAngleCalibrationMode</references>
        <references refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" compoundref="_m_p_u9250_8h" startline="176">MPU9250_ADDRESS</references>
        <references refid="class_m_p_u9250_1a173e0594b9d3ecb6ece2b71f9f59fc50" compoundref="_m_p_u9250_8h" startline="225">MPU9250::mRes</references>
        <references refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mx</references>
        <references refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" compoundref="_m_p_u9250_8h" startline="237">MPU9250::mx_max</references>
        <references refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" compoundref="_m_p_u9250_8h" startline="236">MPU9250::mx_min</references>
        <references refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" compoundref="_m_p_u9250_8h" startline="227">MPU9250::my</references>
        <references refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" compoundref="_m_p_u9250_8h" startline="239">MPU9250::my_max</references>
        <references refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" compoundref="_m_p_u9250_8h" startline="238">MPU9250::my_min</references>
        <references refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" compoundref="_m_p_u9250_8h" startline="227">MPU9250::mz</references>
        <references refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" compoundref="_m_p_u9250_8h" startline="241">MPU9250::mz_max</references>
        <references refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" compoundref="_m_p_u9250_8h" startline="240">MPU9250::mz_min</references>
        <references refid="class_m_p_u9250_1ab3d0117a094b81ac2e07f5c2d68aa5f4" compoundref="_m_p_u9250_8h" startline="212">MPU9250::pitch</references>
        <references refid="class_m_p_u9250_1a9ad1847d56ff8d3660a9eb6fee3a9d9b" compoundref="_m_p_u9250_8cpp" startline="66" endline="73">MPU9250::readAccelData</references>
        <references refid="class_m_p_u9250_1a846032e6a6d737f4ff62065ca0e1568f" compoundref="_m_p_u9250_8cpp" startline="454" endline="463">MPU9250::readByte</references>
        <references refid="class_m_p_u9250_1a7f0f6be23ed65146391cf91e4739ccc0" compoundref="_m_p_u9250_8cpp" startline="76" endline="83">MPU9250::readGyroData</references>
        <references refid="class_m_p_u9250_1a5d3589bd83a003da56546474dd9ca519" compoundref="_m_p_u9250_8cpp" startline="85" endline="106">MPU9250::readMagData</references>
        <references refid="class_m_p_u9250_1a3ab318a519e0f85a38d0e40d4bedc89f" compoundref="_m_p_u9250_8cpp" startline="108" endline="113">MPU9250::readTempData</references>
        <references refid="class_m_p_u9250_1ad394d6659aa446adff547feaa4985f94" compoundref="_m_p_u9250_8h" startline="212">MPU9250::roll</references>
        <references refid="class_m_p_u9250_1ac40db4e2fb94e9b33ec0b821c0b6ed2d" compoundref="_m_p_u9250_8h" startline="218">MPU9250::sum</references>
        <references refid="class_m_p_u9250_1a604d036ab632885152ab770b3c64676a" compoundref="_m_p_u9250_8h" startline="217">MPU9250::sumCount</references>
        <references refid="class_m_p_u9250_1a8fa1b4fa4bc8db4bd162bc4f8ee8f0ea" compoundref="_m_p_u9250_8h" startline="214">MPU9250::tempCount</references>
        <references refid="class_m_p_u9250_1a2190394242c2b74ff53c20f8180af287" compoundref="_m_p_u9250_8h" startline="213">MPU9250::temperature</references>
        <references refid="class_m_p_u9250_1a39e17cffe3de219d3f991b6476833e40" compoundref="_m_p_u9250_8cpp" startline="116" endline="126">MPU9250::updateTime</references>
        <referencedby refid="_wind_angle__2950_8h_1a615f47fff7cac855df68d4e7eae7deff" compoundref="_wind_angle__2950_8cpp" startline="149" endline="163">IMU_Mag_Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_wind_angle__2950_8cpp_1a5ad216273a9dcd578de2e0e683571164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Load_IMU_Calibation_Values</definition>
        <argsstring>(void)</argsstring>
        <name>Load_IMU_Calibation_Values</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" line="267" column="1" bodyfile="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp" bodystart="267" bodyend="278"/>
        <references refid="structconfig_values_type_1a5c9f8e7fac316e921c900b245d3ab8e5" compoundref="config_values_8h" startline="124">configValuesType::mx_max</references>
        <references refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" compoundref="_m_p_u9250_8h" startline="237">MPU9250::mx_max</references>
        <references refid="structconfig_values_type_1a0876ce5174fefcd0b39cccee44eca68a" compoundref="config_values_8h" startline="123">configValuesType::mx_min</references>
        <references refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" compoundref="_m_p_u9250_8h" startline="236">MPU9250::mx_min</references>
        <references refid="structconfig_values_type_1aac3f9de446641e39b318ba8f23ca12ce" compoundref="config_values_8h" startline="126">configValuesType::my_max</references>
        <references refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" compoundref="_m_p_u9250_8h" startline="239">MPU9250::my_max</references>
        <references refid="structconfig_values_type_1ab7c1874d390dec419ff4d54ce11b6ebd" compoundref="config_values_8h" startline="125">configValuesType::my_min</references>
        <references refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" compoundref="_m_p_u9250_8h" startline="238">MPU9250::my_min</references>
        <references refid="structconfig_values_type_1a6758579cc2d41935882eab00baf129f5" compoundref="config_values_8h" startline="128">configValuesType::mz_max</references>
        <references refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" compoundref="_m_p_u9250_8h" startline="241">MPU9250::mz_max</references>
        <references refid="structconfig_values_type_1a1be1ac022e4efe86be6f72be280c2dac" compoundref="config_values_8h" startline="127">configValuesType::mz_min</references>
        <references refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" compoundref="_m_p_u9250_8h" startline="240">MPU9250::mz_min</references>
        <referencedby refid="_wind_angle__2950_8h_1a37c1ab62af781b700d0926c56b21f6c5" compoundref="_wind_angle__2950_8cpp" startline="49" endline="147">WingSailAngleSensor_Init</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wind_angle__2950_8h" kindref="compound">WindAngle_2950.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MPU9250<sp/>Basic<sp/>Example<sp/>Code</highlight></codeline>
<codeline lineno="7"><highlight class="comment">by:<sp/>Kris<sp/>Winer</highlight></codeline>
<codeline lineno="8"><highlight class="comment">date:<sp/>April<sp/>1,<sp/>2014</highlight></codeline>
<codeline lineno="9"><highlight class="comment">license:<sp/>Beerware<sp/>-<sp/>Use<sp/>this<sp/>code<sp/>however<sp/>you&apos;d<sp/>like.<sp/>If<sp/>you</highlight></codeline>
<codeline lineno="10"><highlight class="comment">find<sp/>it<sp/>useful<sp/>you<sp/>can<sp/>buy<sp/>me<sp/>a<sp/>beer<sp/>some<sp/>time.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">Modified<sp/>by<sp/>Brent<sp/>Wilkins<sp/>July<sp/>19,<sp/>2016</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">Demonstrate<sp/>basic<sp/>MPU-9250<sp/>functionality<sp/>including<sp/>parameterizing<sp/>the<sp/>register</highlight></codeline>
<codeline lineno="14"><highlight class="comment">addresses,<sp/>initializing<sp/>the<sp/>sensor,<sp/>getting<sp/>properly<sp/>scaled<sp/>accelerometer,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">gyroscope,<sp/>and<sp/>magnetometer<sp/>data<sp/>out.<sp/>Added<sp/>display<sp/>functions<sp/>to<sp/>allow<sp/>display</highlight></codeline>
<codeline lineno="16"><highlight class="comment">to<sp/>on<sp/>breadboard<sp/>monitor.<sp/>Addition<sp/>of<sp/>9<sp/>DoF<sp/>sensor<sp/>fusion<sp/>using<sp/>open<sp/>source</highlight></codeline>
<codeline lineno="17"><highlight class="comment">Madgwick<sp/>and<sp/>Mahony<sp/>filter<sp/>algorithms.<sp/>Sketch<sp/>runs<sp/>on<sp/>the<sp/>3.3<sp/>V<sp/>8<sp/>MHz<sp/>Pro<sp/>Mini</highlight></codeline>
<codeline lineno="18"><highlight class="comment">and<sp/>the<sp/>Teensy<sp/>3.1.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">SDA<sp/>and<sp/>SCL<sp/>should<sp/>have<sp/>external<sp/>pull-up<sp/>resistors<sp/>(to<sp/>3.3V).</highlight></codeline>
<codeline lineno="21"><highlight class="comment">10k<sp/>resistors<sp/>are<sp/>on<sp/>the<sp/>EMSENSR-9250<sp/>breakout<sp/>board.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">Hardware<sp/>setup:</highlight></codeline>
<codeline lineno="24"><highlight class="comment">MPU9250<sp/>Breakout<sp/>---------<sp/>Arduino</highlight></codeline>
<codeline lineno="25"><highlight class="comment">VDD<sp/>----------------------<sp/>3.3V</highlight></codeline>
<codeline lineno="26"><highlight class="comment">VDDI<sp/>---------------------<sp/>3.3V</highlight></codeline>
<codeline lineno="27"><highlight class="comment">SDA<sp/>-----------------------<sp/>A4</highlight></codeline>
<codeline lineno="28"><highlight class="comment">SCL<sp/>-----------------------<sp/>A5</highlight></codeline>
<codeline lineno="29"><highlight class="comment">GND<sp/>----------------------<sp/>GND</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Wire.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wind_angle__2950_8h" kindref="compound">WindAngle_2950.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_m_p_u9250_8h" kindref="compound">MPU9250.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="location_8h" kindref="compound">location.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_values_8h" kindref="compound">configValues.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><ref refid="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" kindref="member">MPU9250_ID</ref><sp/>=<sp/>0x71;</highlight></codeline>
<codeline lineno="40" refid="_wind_angle__2950_8cpp_1a15ba24e40e95c7684d214548cce20fb3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><ref refid="_wind_angle__2950_8cpp_1a15ba24e40e95c7684d214548cce20fb3" kindref="member">MPU9255_ID</ref><sp/>=<sp/>0x73;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pin<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>intPin<sp/>=<sp/>12;<sp/><sp/>//<sp/>These<sp/>can<sp/>be<sp/>changed,<sp/>2<sp/>and<sp/>3<sp/>are<sp/>the<sp/>Arduinos<sp/>ext<sp/>int<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_m_p_u9250" kindref="compound">MPU9250</ref><sp/><ref refid="_wind_angle__2950_8cpp_1a13974f1660839d8bc696129bad2abf64" kindref="member">WingSailAngleSensor</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structconfig_values_type" kindref="compound">configValuesType</ref><sp/><ref refid="_wind_angle__2950_8cpp_1a1106f1eecd15a9233233ae672d651265" kindref="member">Configuration</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>HardwareSerial<sp/>*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_wind_angle__2950_8h_1a37c1ab62af781b700d0926c56b21f6c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_wind_angle__2950_8cpp_1a37c1ab62af781b700d0926c56b21f6c5" kindref="member">WingSailAngleSensor_Init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.1<sp/>22/10/2016<sp/>updated<sp/>to<sp/>support<sp/>parameterised<sp/>serial<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.2<sp/>22/11/2016<sp/>updated<sp/>to<sp/>improve<sp/>handling<sp/>where<sp/>there&apos;s<sp/>no<sp/>IMU<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.3<sp/>17/3/2019<sp/>updatd<sp/>to<sp/>support<sp/>both<sp/>MPU<sp/>2950<sp/>and<sp/>2955.<sp/>I<sp/>think<sp/>they&apos;ll<sp/>operate<sp/>the<sp/>same<sp/>but<sp/>different<sp/>IDs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TWBR<sp/>=<sp/>12;<sp/><sp/>//<sp/>400<sp/>kbit/sec<sp/>I2C<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Wire.begin();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>interrupt<sp/>pin,<sp/>its<sp/>set<sp/>as<sp/>active<sp/>high,<sp/>push-pull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pinMode(intPin,<sp/>INPUT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//digitalWrite(intPin,<sp/>LOW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>calibration<sp/>mode<sp/>is<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8f60e4e9a6511c9a5bc6a437484dab0f" kindref="member">MagneticAngleCalibrationMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>WHO_AM_I<sp/>register,<sp/>this<sp/>is<sp/>a<sp/>good<sp/>test<sp/>of<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>c<sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a846032e6a6d737f4ff62065ca0e1568f" kindref="member">readByte</ref>(<ref refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" kindref="member">MPU9250_ADDRESS</ref>,<sp/><ref refid="_m_p_u9250_8h_1a1f3713ef719334aabf2d198255a14b90" kindref="member">WHO_AM_I_MPU9250</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" kindref="member">MPU9250_ID</ref><sp/>||<sp/>c<sp/>==<sp/><ref refid="_wind_angle__2950_8cpp_1a15ba24e40e95c7684d214548cce20fb3" kindref="member">MPU9255_ID</ref>)<sp/></highlight><highlight class="comment">//<sp/>WHO_AM_I<sp/>should<sp/>always<sp/>be<sp/>0x68</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="_wind_angle__2950_8cpp_1a3b5084021087677ea8d31dbee2d98f70" kindref="member">MPU9250_ID</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;MSG,MPU9250<sp/>found<sp/>at<sp/>0x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;MSG,MPU9255<sp/>found<sp/>at<sp/>0x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(<ref refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" kindref="member">MPU9250_ADDRESS</ref>,<sp/>HEX);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;MSG,MPU<sp/>ID<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(c,<sp/>HEX);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).println(F(&quot;MSG,MPU9250<sp/>Debug<sp/>1&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>performing<sp/>self<sp/>test<sp/>and<sp/>reporting<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad3bbdef687191a70354ee2f900352993" kindref="member">MPU9250SelfTest</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1ae9bbaec48bb667684b5d383c8a3c7504" kindref="member">SelfTest</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;MSG,MPU9250<sp/>Debug<sp/>2&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;x-axis<sp/>self<sp/>test:<sp/>acceleration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[0],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;y-axis<sp/>self<sp/>test:<sp/>acceleration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[1],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;z-axis<sp/>self<sp/>test:<sp/>acceleration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[2],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;x-axis<sp/>self<sp/>test:<sp/>gyration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[3],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;y-axis<sp/>self<sp/>test:<sp/>gyration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[4],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;z-axis<sp/>self<sp/>test:<sp/>gyration<sp/>trim<sp/>within<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(WingSailAngleSensor.SelfTest[5],<sp/>1);<sp/>(*Serials[CommandPort]).println(&quot;%<sp/>of<sp/>factory<sp/>value&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibrate<sp/>gyro<sp/>and<sp/>accelerometers,<sp/>load<sp/>biases<sp/>in<sp/>bias<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aeac1ae4402a4eb9a74bea5ad8af929c1" kindref="member">calibrateMPU9250</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a4fc2232b3fdbd61bc1024c86842ddf9a" kindref="member">gyroBias</ref>,<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a7b0e6389baccd5592c95cae9d24d1317" kindref="member">accelBias</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;MSG,MPU9250<sp/>Debug<sp/>3&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a03803202142ac461867daa9dd06fdd80" kindref="member">initMPU9250</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>device<sp/>for<sp/>active<sp/>mode<sp/>read<sp/>of<sp/>acclerometer,<sp/>gyroscope,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temperature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>WHO_AM_I<sp/>register<sp/>of<sp/>the<sp/>magnetometer,<sp/>this<sp/>is<sp/>a<sp/>good<sp/>test<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>byte<sp/>d<sp/>=<sp/>WingSailAngleSensor.readByte(AK8963_ADDRESS,<sp/>WHO_AM_I_AK8963);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(&quot;AK8963<sp/>&quot;);<sp/>Serial.print(&quot;I<sp/>AM<sp/>&quot;);<sp/>Serial.print(d,<sp/>HEX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(&quot;<sp/>I<sp/>should<sp/>be<sp/>&quot;);<sp/>Serial.println(0x48,<sp/>HEX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;MSG,MPU9250<sp/>Debug<sp/>4&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>magnetometer<sp/>calibration<sp/>from<sp/>AK8963<sp/>ROM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aab7b6d912fdc88c4fedfad90abe2aeab" kindref="member">initAK8963</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" kindref="member">magCalibration</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(*Serials[CommandPort]).println(F(&quot;MSG,MPU9250<sp/>Debug<sp/>5&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>device<sp/>for<sp/>active<sp/>mode<sp/>read<sp/>of<sp/>magnetometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(F(</highlight><highlight class="stringliteral">&quot;MSG,AK8963<sp/>initialized<sp/>for<sp/>active<sp/>data<sp/>mode....&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(F(</highlight><highlight class="stringliteral">&quot;MSG,MPU9250<sp/>initialized<sp/>for<sp/>active<sp/>data<sp/>mode....&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/><sp/>Serial.println(&quot;Calibration<sp/>values:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;X-Axis<sp/>sensitivity<sp/>adjustment<sp/>value<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).println(WingSailAngleSensor.magCalibration[0],<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;Y-Axis<sp/>sensitivity<sp/>adjustment<sp/>value<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).println(WingSailAngleSensor.magCalibration[1],<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).print(&quot;Z-Axis<sp/>sensitivity<sp/>adjustment<sp/>value<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*Serials[CommandPort]).println(WingSailAngleSensor.magCalibration[2],<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//IMU_Mag_Init();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>either<sp/>init<sp/>the<sp/>calibration<sp/>values<sp/>from<sp/>a<sp/>reading;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_wind_angle__2950_8cpp_1a5ad216273a9dcd578de2e0e683571164" kindref="member">Load_IMU_Calibation_Values</ref>();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>calibration<sp/>values<sp/>from<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a71de2142b4440cd5a0e99066f9890e27" kindref="member">Initialsed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>(c<sp/>==<sp/>0x71<sp/>or<sp/>0x73)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).print(F(</highlight><highlight class="stringliteral">&quot;MSG,No<sp/>IMU<sp/>MPU9250<sp/>found:<sp/>0x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_wind_angle__2950_8cpp_1aae3eed66759a369bc96c71a1c39733af" kindref="member">Serials</ref>[<ref refid="_bluetooth_connection_8cpp_1aadcc1cb4a3163b28898cf7865b944006" kindref="member">CommandPort</ref>]).println(<ref refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" kindref="member">MPU9250_ADDRESS</ref>,<sp/>HEX);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a71de2142b4440cd5a0e99066f9890e27" kindref="member">Initialsed</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="_wind_angle__2950_8h_1a615f47fff7cac855df68d4e7eae7deff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_wind_angle__2950_8cpp_1a615f47fff7cac855df68d4e7eae7deff" kindref="member">IMU_Mag_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>as<sp/>a<sp/>prelude<sp/>to<sp/>calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>once<sp/>to<sp/>initiate<sp/>the<sp/>compass<sp/>calibration<sp/>limits<sp/>to<sp/>safe<sp/>values<sp/>prior<sp/>to<sp/>a<sp/>calibration<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>15/8/2016<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_wind_angle__2950_8cpp_1a8de6420d60657c8e1678c6c0d3bff464" kindref="member">WingSailAngleSensor_Read</ref>();<sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>IMU<sp/>Mag<sp/>values<sp/>are<sp/>reasonable<sp/>before<sp/>clearing<sp/>and<sp/>re-initiating<sp/>the<sp/>recorded<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="_wind_angle__2950_8h_1a9db0f166dba1a55795c2013eb93034af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_wind_angle__2950_8cpp_1a9db0f166dba1a55795c2013eb93034af" kindref="member">IMU_Mag_Calibrate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>called<sp/>after<sp/>each<sp/>compass<sp/>read<sp/>during<sp/>a<sp/>calibration<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>IMU<sp/>mx,<sp/>my<sp/>&amp;<sp/>mz<sp/>values<sp/>follow<sp/>an<sp/>approximate<sp/>sine<sp/>wave<sp/>(with<sp/>an<sp/>amplitude<sp/>an<sp/>offset<sp/>to<sp/>be<sp/>calibated<sp/>out).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>will<sp/>adjust<sp/>the<sp/>upper<sp/>and<sp/>lower<sp/>limits<sp/>of<sp/>the<sp/>sine<sp/>curve<sp/>of<sp/>each<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>intended<sp/>that<sp/>that<sp/>vessel<sp/>is<sp/>placed<sp/>manually<sp/>into<sp/>compass<sp/>calibration<sp/>mode,<sp/>and<sp/>then<sp/>about<sp/>two<sp/>full<sp/>turns<sp/>are<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>set<sp/>resonable<sp/>upper<sp/>and<sp/>lower<sp/>limits<sp/>for<sp/>each<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>should<sp/>then<sp/>be<sp/>recorded<sp/>and<sp/>set<sp/>in<sp/>the<sp/>config<sp/>stucture<sp/>EEPROM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>15/8/2016<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>calibration<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref><sp/>&gt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>&lt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref><sp/>&gt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>&lt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref><sp/>&gt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>&lt;<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>)<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//save<sp/>to<sp/>configuration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1a0876ce5174fefcd0b39cccee44eca68a" kindref="member">mx_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1a5c9f8e7fac316e921c900b245d3ab8e5" kindref="member">mx_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1ab7c1874d390dec419ff4d54ce11b6ebd" kindref="member">my_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1aac3f9de446641e39b318ba8f23ca12ce" kindref="member">my_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1a1be1ac022e4efe86be6f72be280c2dac" kindref="member">mz_min</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Configuration.<ref refid="structconfig_values_type_1a6758579cc2d41935882eab00baf129f5" kindref="member">mz_max</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="_wind_angle__2950_8h_1a8de6420d60657c8e1678c6c0d3bff464" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_wind_angle__2950_8cpp_1a8de6420d60657c8e1678c6c0d3bff464" kindref="member">WingSailAngleSensor_Read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>intPin<sp/>goes<sp/>high,<sp/>all<sp/>data<sp/>registers<sp/>have<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>interrupt,<sp/>check<sp/>if<sp/>data<sp/>ready<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a846032e6a6d737f4ff62065ca0e1568f" kindref="member">readByte</ref>(<ref refid="_m_p_u9250_8h_1af4d54e584a662662888836b3a9b9eb08" kindref="member">MPU9250_ADDRESS</ref>,<sp/><ref refid="_m_p_u9250_8h_1a62cba161837810295654c3cc2de959a6" kindref="member">INT_STATUS</ref>)<sp/>&amp;<sp/>0x01)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a9ad1847d56ff8d3660a9eb6fee3a9d9b" kindref="member">readAccelData</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1adb56df6ceaf1dc204f97270540ac8b14" kindref="member">accelCount</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>x/y/z<sp/>adc<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c7dba3645913bf97f8b47d2bd4af2b0" kindref="member">getAres</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we&apos;ll<sp/>calculate<sp/>the<sp/>accleration<sp/>value<sp/>into<sp/>actual<sp/>g&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>depends<sp/>on<sp/>scale<sp/>being<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aea8a7622821bf8aca55fcef71d91e29f" kindref="member">ax</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1adb56df6ceaf1dc204f97270540ac8b14" kindref="member">accelCount</ref>[0]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1afa89af2772cead0f76a4ddd92ec5f6a8" kindref="member">aRes</ref>;<sp/></highlight><highlight class="comment">//<sp/>-<sp/>accelBias[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5129e95dbe12544fa34cc53b5644ff71" kindref="member">ay</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)WingSailAngleSensor.<ref refid="class_m_p_u9250_1adb56df6ceaf1dc204f97270540ac8b14" kindref="member">accelCount</ref>[1]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1afa89af2772cead0f76a4ddd92ec5f6a8" kindref="member">aRes</ref>;<sp/></highlight><highlight class="comment">//<sp/>-<sp/>accelBias[1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8ab7a335476e40a26aba80f867ac7da9" kindref="member">az</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1adb56df6ceaf1dc204f97270540ac8b14" kindref="member">accelCount</ref>[2]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1afa89af2772cead0f76a4ddd92ec5f6a8" kindref="member">aRes</ref>;<sp/></highlight><highlight class="comment">//<sp/>-<sp/>accelBias[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a7f0f6be23ed65146391cf91e4739ccc0" kindref="member">readGyroData</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a14ab2e2ab741ca245007cb9a134e07f3" kindref="member">gyroCount</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>x/y/z<sp/>adc<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1afd804ec9bd68961fc0084af461104304" kindref="member">getGres</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>gyro<sp/>value<sp/>into<sp/>actual<sp/>degrees<sp/>per<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>depends<sp/>on<sp/>scale<sp/>being<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a59b6d7bd37738bac258da24ad330feef" kindref="member">gx</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1a14ab2e2ab741ca245007cb9a134e07f3" kindref="member">gyroCount</ref>[0]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a2c137b20138d3c80c4828691d5656d92" kindref="member">gRes</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a126311c382d2667b7bc7cbe1f9b38b51" kindref="member">gy</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)WingSailAngleSensor.<ref refid="class_m_p_u9250_1a14ab2e2ab741ca245007cb9a134e07f3" kindref="member">gyroCount</ref>[1]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a2c137b20138d3c80c4828691d5656d92" kindref="member">gRes</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a756658ca06a3807ef426ab87022a15c9" kindref="member">gz</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1a14ab2e2ab741ca245007cb9a134e07f3" kindref="member">gyroCount</ref>[2]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a2c137b20138d3c80c4828691d5656d92" kindref="member">gRes</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5d3589bd83a003da56546474dd9ca519" kindref="member">readMagData</ref>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aff92db5334c43a72f5c2f1fc8ee6f596" kindref="member">magCount</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>x/y/z<sp/>adc<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ab6b113da9b2fb006eb44dc8078e699c5" kindref="member">getMres</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>environmental<sp/>x-axis<sp/>correction<sp/>in<sp/>milliGauss,<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>automatically<sp/>calculated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//myIMU.magbias[0]<sp/>=<sp/>(mx_max<sp/>-<sp/>mx_min)<sp/>/<sp/>2;<sp/>//<sp/>+470.;</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//myIMU.magbias[1]<sp/>=<sp/>(my_max<sp/>-<sp/>my_min)<sp/>/<sp/>2;<sp/>//<sp/>+120.;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//myIMU.magbias[2]<sp/>=<sp/>(mz_max<sp/>-<sp/>mz_min)<sp/>/<sp/>2;<sp/>//<sp/>+125.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>magnetometer<sp/>values<sp/>in<sp/>milliGauss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Include<sp/>factory<sp/>calibration<sp/>per<sp/>data<sp/>sheet<sp/>and<sp/>user<sp/>environmental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>corrections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>actual<sp/>magnetometer<sp/>value,<sp/>this<sp/>depends<sp/>on<sp/>scale<sp/>being<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1aff92db5334c43a72f5c2f1fc8ee6f596" kindref="member">magCount</ref>[0]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a173e0594b9d3ecb6ece2b71f9f59fc50" kindref="member">mRes</ref>*WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" kindref="member">magCalibration</ref>[0]<sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0e05494e9b3bec043cd890f0bc8917c9" kindref="member">magbias</ref>[0];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)WingSailAngleSensor.<ref refid="class_m_p_u9250_1aff92db5334c43a72f5c2f1fc8ee6f596" kindref="member">magCount</ref>[1]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a173e0594b9d3ecb6ece2b71f9f59fc50" kindref="member">mRes</ref>*WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" kindref="member">magCalibration</ref>[1]<sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0e05494e9b3bec043cd890f0bc8917c9" kindref="member">magbias</ref>[1];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1af11072922aa71ffb125fe3786f848653" kindref="member">mz</ref><sp/>=<sp/>(float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1aff92db5334c43a72f5c2f1fc8ee6f596" kindref="member">magCount</ref>[2]<sp/>*<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a173e0594b9d3ecb6ece2b71f9f59fc50" kindref="member">mRes</ref>*WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1076b6b2c90d58ab4a0c2f6cc7110b18" kindref="member">magCalibration</ref>[2]<sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0e05494e9b3bec043cd890f0bc8917c9" kindref="member">magbias</ref>[2];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mx_cal<sp/>=<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref><sp/>-<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>+<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref>)<sp/>/<sp/>2)<sp/>/<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>my_cal<sp/>=<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad7cf9fe3134d24f46705881b2e002f31" kindref="member">my</ref><sp/>-<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>+<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref>)<sp/>/<sp/>2)<sp/>/<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mz_cal<sp/>=<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa4cc8b2c9417304d1106bdbd988ac607" kindref="member">mx</ref><sp/>-<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>+<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref>)<sp/>/<sp/>2)<sp/>/<sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1add8846692e3550adc9a6a95517aec4d5" kindref="member">MagneticAngle</ref><sp/>=<sp/>atan2(my_cal,<sp/>mx_cal)<sp/>*<sp/>RAD_TO_DEG;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>Pitch<sp/>and<sp/>Roll<sp/>calculation.<sp/>No<sp/>Yaw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ad394d6659aa446adff547feaa4985f94" kindref="member">roll</ref><sp/>=<sp/>atan2(WingSailAngleSensor.<ref refid="class_m_p_u9250_1aea8a7622821bf8aca55fcef71d91e29f" kindref="member">ax</ref>,<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8ab7a335476e40a26aba80f867ac7da9" kindref="member">az</ref>)<sp/><sp/>*<sp/>RAD_TO_DEG;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ab3d0117a094b81ac2e07f5c2d68aa5f4" kindref="member">pitch</ref><sp/>=<sp/>atan2(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5129e95dbe12544fa34cc53b5644ff71" kindref="member">ay</ref>,<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8ab7a335476e40a26aba80f867ac7da9" kindref="member">az</ref>)<sp/>*<sp/>RAD_TO_DEG;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>(readByte(MPU9250_ADDRESS,<sp/>INT_STATUS)<sp/>&amp;<sp/>0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>called<sp/>before<sp/>updating<sp/>quaternions!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a39e17cffe3de219d3f991b6476833e40" kindref="member">updateTime</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a4d6b6338685120de2e21aa30d9d89389" kindref="member">delt_t</ref><sp/>=<sp/>millis()<sp/>-<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a9d231520d019ba7879c60ef7b72707a5" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8fa1b4fa4bc8db4bd162bc4f8ee8f0ea" kindref="member">tempCount</ref><sp/>=<sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a3ab318a519e0f85a38d0e40d4bedc89f" kindref="member">readTempData</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>adc<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temperature<sp/>in<sp/>degrees<sp/>Centigrade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a2190394242c2b74ff53c20f8180af287" kindref="member">temperature</ref><sp/>=<sp/>((float)WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8fa1b4fa4bc8db4bd162bc4f8ee8f0ea" kindref="member">tempCount</ref>)<sp/>/<sp/>333.87<sp/>+<sp/>21.0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a9d231520d019ba7879c60ef7b72707a5" kindref="member">count</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a604d036ab632885152ab770b3c64676a" kindref="member">sumCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1ac40db4e2fb94e9b33ec0b821c0b6ed2d" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WingSailAngleSensor.<ref refid="class_m_p_u9250_1a8f60e4e9a6511c9a5bc6a437484dab0f" kindref="member">MagneticAngleCalibrationMode</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_wind_angle__2950_8cpp_1a9db0f166dba1a55795c2013eb93034af" kindref="member">IMU_Mag_Calibrate</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="_wind_angle__2950_8h_1a5ad216273a9dcd578de2e0e683571164" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_wind_angle__2950_8cpp_1a5ad216273a9dcd578de2e0e683571164" kindref="member">Load_IMU_Calibation_Values</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>config<sp/>values<sp/>relating<sp/>to<sp/>the<sp/>IMU,<sp/>into<sp/>the<sp/>IMU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1.0<sp/>27/8/2016<sp/>John<sp/>Semmens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a1c31945120ad411a226400690b3182cb" kindref="member">mx_min</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1a0876ce5174fefcd0b39cccee44eca68a" kindref="member">mx_min</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aa3cb5dd3e1f8bf678a2734885d33e56c" kindref="member">mx_max</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1a5c9f8e7fac316e921c900b245d3ab8e5" kindref="member">mx_max</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a5025a77f0594dc6ffd6dfac9bbdbb459" kindref="member">my_min</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1ab7c1874d390dec419ff4d54ce11b6ebd" kindref="member">my_min</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a02007a0db5b9f53aefe1d37139bcc23d" kindref="member">my_max</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1aac3f9de446641e39b318ba8f23ca12ce" kindref="member">my_max</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1aac36dca80b508e7516160df705b28a33" kindref="member">mz_min</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1a1be1ac022e4efe86be6f72be280c2dac" kindref="member">mz_min</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>WingSailAngleSensor.<ref refid="class_m_p_u9250_1a0c33dd99aa2772cc50aa67bbd3e65137" kindref="member">mz_max</ref><sp/>=<sp/>Configuration.<ref refid="structconfig_values_type_1a6758579cc2d41935882eab00baf129f5" kindref="member">mz_max</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Cloud/OneDrive/Voyager/VoyagerOS/WindAngle_2950.cpp"/>
  </compounddef>
</doxygen>
